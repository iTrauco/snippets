<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Date Exported</key>
	<string>2021-02-14 23:07:29 -0500</string>
	<key>Library Name</key>
	<string>main.snippetslablibrary</string>
	<key>Snippets</key>
	<array>
		<dict>
			<key>Date Created</key>
			<string>2021-01-25 16:43:14 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-26 19:36:45 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=QUERY(
       {IMPORTRANGE("https://docs.google.com/spreadsheets/d/1UBobgPrK1rWi68kNh45OCWywFJyBOZeF5GauEEHLWIk","kt_schedule")},
       "SELECT Col1 WHERE Col1 is not null",
       1
)</string>
					<key>Date Created</key>
					<string>2021-01-25 16:43:14 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-25 16:43:19 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Example Query</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 15:20:54 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-29 21:24:02 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=RIGHT(A2,LEN(A2)-FIND(" ",A2))</string>
					<key>Date Created</key>
					<string>2020-12-29 15:20:54 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 15:21:07 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=RIGHT(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-16 20:45:58 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-16 20:46:13 -0500</string>
			<key>Folder</key>
			<string>python3</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>#! /usr/bin/env python3

import webbrowser
from time import sleep

url = input('Input the URL to reload, including "http://: ')

while True:
    print("refreshing...")
    webbrowser.open(url, new=0)
    sleep(10)</string>
					<key>Date Created</key>
					<string>2020-12-16 20:45:58 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-16 20:46:38 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://gist.github.com/iTrauco/79f9ac98830be9d44cb675bfc44b0dc3</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>refresh a given URL every 10 seconds script</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 23:38:26 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 23:38:33 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function onOpen() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet();
  var entries = [{
    name : "Copy formulas",
    functionName : "copyFormulas"
  }];
  sheet.addMenu("Scripts", entries);
};
function copyFormulas() {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];
    var row = 2;
    CopyFormulasDown.copyFormulasDown(sheet, row);
}</string>
					<key>Date Created</key>
					<string>2021-01-28 23:38:26 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 23:38:51 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>In many spreadsheets, you have data in a few columns, and formulas that work with this data in other columns. When you add more rows, you have to copy the formulas to each row. This script automates copying the formulas to new rows.

You can use the script as a library in your project. The project key is : MSqCbU8hTkNuB2nTncoeP0HPfFjUr1CYB. You can also copy and paste the code directly in your own script, see the source code.

The script has only one public function, copyFormulasDown(Sheet sheet, int sourceRow), as documented below.

You can create a menu entry and copy the formulas from the menu:

You can take it one step further by using an installable trigger, so the copyFormulas() function from the code above is called automatically when you edit the spreadsheet or submit a form.

copyFormulasDown(Sheet sheet, int sourceRow)
Copy formulas from the a source row in a sheet to rows below

Arguments:</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Copy Formulas Down</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-18 22:53:49 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-18 22:54:12 -0500</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>:set
:10,12s/^/#</string>
					<key>Date Created</key>
					<string>2020-12-18 22:53:49 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-18 22:54:21 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Regex Multi Line Comment</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-01 19:58:44 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-01 19:58:50 -0400</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>git diff &lt;a commit sha1&gt;...&lt;b commit sha2&gt;</string>
					<key>Date Created</key>
					<string>2019-08-01 19:58:44 -0400</string>
					<key>Date Modified</key>
					<string>2019-08-01 19:59:25 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>http://bit.ly/2GGHmte</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>shows file names and what changed in each file</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:20:36 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:20:56 -0500</string>
			<key>Folder</key>
			<string>python3</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># Load Json into a Python object

import urllib2
import json
req = urllib2.Request("http://localhost:81/sensors/temperature.json")
opener = urllib2.build_opener()
f = opener.open(req)
json = json.loads(f.read())
print json
print json['unit']

# Array example

import urllib2
import json
req = urllib2.Request("http://vimeo.com/api/v2/video/38356.json")
opener = urllib2.build_opener()
f = opener.open(req)
json = json.loads(f.read())
print json
print json[0]['title']</string>
					<key>Date Created</key>
					<string>2021-01-28 21:20:36 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:20:49 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Python Read JSON from HTTP Request of URL</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 22:25:46 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:26:00 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>gg"*yG</string>
					<key>Date Created</key>
					<string>2020-10-25 22:25:46 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:26:08 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>You should yank the text to the * or + registers:

gg"*yG

Explanation:

gg to get the cursor to the first character of the file
"*y to start a yank command to the register * from the first line, until...
G to go the end of the file

Source: https://stackoverflow.com/questions/1620018/copy-all-the-lines-to-clipboard</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Copy All Lines to System Clipboard</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 22:22:48 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:23:13 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>:noh</string>
					<key>Date Created</key>
					<string>2020-10-25 22:22:48 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:23:26 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Disables all active highlights in the current buffer</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>VIM No Higlight</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-30 18:48:57 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-31 24:53:38 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=QUERY(people, "Select E where E is not null offset 1")</string>
					<key>Date Created</key>
					<string>2020-12-30 18:48:57 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 18:49:02 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=QUERY(
      {
      IMPORTRANGE("google-sheet-id1",
                  "sheet-name1!range1");
      IMPORTRANGE("google-sheet-id2",
                  "sheet-name2!range2"
                  )},
      "SELECT * WHERE Col8 = 'foo'",
      1
)    </string>
					<key>Date Created</key>
					<string>2020-12-30 21:19:34 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 21:27:33 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>ss1 = https://docs.google.com/spreadsheets/d/1YVUUIwweR9gZHJbqb7u2U8vWa46m5kmh_eo_-azXYFs/edit#gid=375647266

ss2 = https://docs.google.com/spreadsheets/d/1pBe2lmxAZjVt-4gX7-ihGP-1P5N-xUrj1jss01Y_r-U/edit#gid=1063480624

=QUERY(
      {
      IMPORTRANGE("https://docs.google.com/spreadsheets/d/1YVUUIwweR9gZHJbqb7u2U8vWa46m5kmh_eo_-azXYFs",
                 "transactions!A1:H");
      IMPORTRANGE("https://docs.google.com/spreadsheets/d/1YVUUIwweR9gZHJbqb7u2U8vWa46m5kmh_eo_-azXYFs",
                  "transaction-hx!A1:H"
                  )},
      "SELECT Col8, Col7",
      1
)   

A dictionary of  2+ IMPORTRANGE external sheet datasets into a single array then queried 
</string>
					<key>Title</key>
					<string>W/ =IMPORTRANGE(f)</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=QUERY(
       {IMPORTRANGE("https://docs.google.com/spreadsheets/d/1UBobgPrK1rWi68kNh45OCWywFJyBOZeF5GauEEHLWIk","kt_schedule")},
       "SELECT Col1 WHERE Col1 is not null",
       1
)</string>
					<key>Date Created</key>
					<string>2020-12-30 22:01:28 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 22:02:09 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>V2</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=QUERY(
  {
    IMPORTRANGE("key-or-url-of-spreadsheet-1", "'sheet-name-1'!A2:Z100");
    IMPORTRANGE("key-or-url-of-spreadsheet-2", "'sheet-name-2'!A2:Z100");
    IMPORTRANGE("key-or-url-of-spreadsheet-3", "'sheet-name-3'!A2:Z100");
    IMPORTRANGE("key-or-url-of-spreadsheet-4", "'sheet-name-4'!A2:Z100")
  },
  "SELECT * WHERE Col1 IS NOT NULL ORDER BY Col3 ASC"
)</string>
					<key>Date Created</key>
					<string>2020-12-31 24:25:50 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-31 24:26:20 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Explanation:
The above query removes blank lines from imported ranges:

SELECT * WHERE Col1 IS NOT NULL
and sorts ascending all data collected together in relation to the third column:

ORDER BY Col3 ASC
For descending, just use DESC in place of ASC.

Of course, we can also arrange any other criteria, or omit them displaying everything without modification:

"SELECT * "
Note:
In order to use the above constructed query, we first need to call a single IMPORTIMAGE() method for each of the spreadsheets we want to refer:

=IMPORTRANGE("key-or-url-of-spreadsheet-1", "'sheet-name-1'!A2:Z100")
We have to do this even if we refer to the same spreadsheet in which we write this formula, but for every spreadsheet it is enough to do it once.

This is to be able to connect these sheets and allow access to the sheets (to which we have the access rights anyway):

                                                    enter image description here

After giving permission for all spreadsheets, we can use the above query.</string>
					<key>Title</key>
					<string>Fragment 2</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=QUERY(
        {IMPORTRANGE(
            “Spreadsheet_url”,
            ”Sheet1!A1:P”);
         IMPORTRANGE(
             “Spreadsheet_url”,
             ”Sheet1!A2:P”);
        IMPORTRANGE(
            “Spreadsheet_url”,
            ”Sheet1!A2:P”)},
    ”Select * where Col1&lt;&gt;””,
    1
)</string>
					<key>Date Created</key>
					<string>2020-12-31 24:53:38 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-31 24:56:30 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment 3</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=QUERY(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 02:26:19 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:52:12 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>Esc                    
 
⌃ + v                   CONTROL + visual mode
 
↑/↓                     (Up / Down w/ Arrows Keys)
  
Shift + I(capital I) 

#                       Press ANY Symbol to Populate

</string>
					<key>Date Created</key>
					<string>2020-10-01 02:26:19 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:27:35 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>press Esc (to leave editing or other mode)
hit ctrl+v (visual block mode)
use the ↑/↓ arrow keys to select lines you want (it won't highlight everything - it's OK!)
Shift+i (capital I)
insert the text you want, e.g. %
press EscEsc

</string>
					<key>Title</key>
					<string>Commenting</string>
				</dict>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-10-01 02:35:29 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 02:45:23 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Uncommenting

press Esc (to leave editing or other mode)
hit ctrl+v (visual block mode)
use the ↑/↓ arrow keys to select the lines to uncomment.
If you want to select multiple characters, use one or combine these methods:

use the left/right arrow keys to select more text
to select chunks of text use shift + ←/→ arrow key
you can repeatedly push the delete keys below, like a regular delete button
press d or x to delete characters, repeatedly if necessary</string>
					<key>Title</key>
					<string>Uncommenting</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>vim</string>
				<string>comments</string>
				<string>multiple lines</string>
			</array>
			<key>Title</key>
			<string>Bulk Line Comments</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 16:24:43 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 16:24:56 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>One workaround: enter the date, then select the range including that cell (as opposed to dragging the blue box), an then fill down using ⌘ + d (Ctrl + d in Windows).</string>
					<key>Date Created</key>
					<string>2021-01-29 16:24:43 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 16:25:00 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>stop google sheets from increasing dates</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-22 16:39:19 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-22 16:39:31 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=INDIRECT(ADDRESS((ROW($A1)-1)*3+COLUMN(A1),1))
</string>
					<key>Date Created</key>
					<string>2021-01-22 16:39:19 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-22 16:39:53 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Used on SXMP Adswiz

https://superuser.com/questions/359617/convert-one-column-into-multiple-rows</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Convert one column into multiple rows</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 02:42:53 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 02:44:30 -0400</string>
			<key>Folder</key>
			<string>Uncategorized</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-10-01 02:42:53 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 02:45:08 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>asds</string>
				</dict>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-10-01 02:44:30 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 02:44:30 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment 2</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>vim</string>
				<string>sessions</string>
			</array>
			<key>Title</key>
			<string>Sessions</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-01 07:53:59 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-01 07:54:44 -0400</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>git diff-tree --no-commit-id --name-only -r</string>
					<key>Date Created</key>
					<string>2019-08-01 07:53:59 -0400</string>
					<key>Date Modified</key>
					<string>2019-08-01 07:54:25 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>git diff-tree</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 22:22:38 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 22:28:41 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>Gspread Python
gspread, gspread is a Python API for Google Sheets. Features: Google Sheets API v4. Open a spreadsheet by title, key or url. Read, write, and format cell ranges. Sharing  gspread is a Python API for Google Sheets. Features: Google Sheets API v4. Open a spreadsheet by title, key or url. Read, write, and format cell ranges. Sharing and access control. Batching updates.

burnash/gspread: Google Sheets Python API, Read, write, and format cell ranges. Sharing and access control. Batching updates. Installation. pip install gspread. Requirements: Python 2.7  Files for gspread, version 3.6.0; Filename, size File type Python version Upload date Hashes; Filename, size gspread-3.6.0-py3-none-any.whl (26.5 kB) File type Wheel Python version py3 Upload date Apr 30, 2020 Hashes View

gspread · PyPI, gspread 3.6.0. pip install gspread. Copy PIP instructions. Latest version. Released: Apr 30, 2020. Google Spreadsheets Python API  Using gspread with NumPy¶ NumPy is a library for scientific computing in Python. It provides tools for working with high performance multi-dimensional arrays. Read contents of a sheet into a NumPy array:


Python upload CSV to Google Sheets
From CSV to Google Sheet Using Python, Click on this link to create a project. Give the project a name. Go to project dashboard and click on + ENABLE APIS AND SERVICES. Search for Google Drive API and click on it. Enable Google Drive API. Click on Create Credentials. Select the parameters and click on What credentials do I need?. We are using that client object to open the Google Sheet CSV-to-Google-Sheet. Finally we are reading the CSV file using open built-in function of Python and importing it to the Google Sheet by that client object. Now run the Python script with this command python upload.py and open CSV-to-Google-Sheet Google Sheet in your browser. You will see that your Google Sheet is updated with the content of the CSV file as following.

How to import a CSV file using Google Sheets API V4, Another alternative to Sam Berlin's answer. If you're using Python, you can use the Drive API via gspread to import a CSV file. Here's an  Once the file is generated, I'm logging into my google sheet account and use the import option to import my CSV file into the google spreadsheet. The manual labor is kinda stupid and I wish to add this ability to my script. Google Sheets API V4. So, I followed this guide, Python Quickstart and was able to complete all the steps.

Google Drive API in Python, In this Google Drive API in Python tutorial, I will be covering how to use Google Drive API to Duration: 7:54 Posted: Jul 30, 2020 I am using gspread to refresh a worksheet in Google Sheets with data from a .CSV file. As much as I've looked around the web, I'm having a hard time finding what I think should be a clean answer to my question. I have the .CSV file in my project directory. Here's my code thus far:


Automate Google Sheets with Python
How to Automate Google Sheets with Python, pygsheets is a simple intuitive python library to access google spreadsheets through the Google Sheets API v4. · Installation · Get client secret. We hope this script helps you automate your Google Sheet extracts with Python as well as look for other tasks you can automate. In the examples above, we’re manually scheduling this script.

Automating Data Extractions From Google Sheets With Python, We'll outline how you can write a Python script that can export data from Google Sheets and insert it into MySQL. When would you use this? You can access particular google spreadsheets with python by providing the index of that sheet in the get_worksheet function. For the first sheet, pass the index 0 and so on. # get the instance of the Spreadsheet. sheet = client. open ( 'commentary data') # get the first sheet of the Spreadsheet.

14 working with google sheets, py Python script that uses EZSheets: A credentials file named credentials-sheets.​json; A token for Google Sheets named token-sheets.pickle; A token for Google  Click this button to create a new Cloud Platform project and automatically enable the Google Sheets API: Enable the Google Sheets API. In resulting dialog click DOWNLOAD CLIENT CONFIGURATION and

Gspread-formatting
gspread-formatting · PyPI, Formatting¶. Here's an example of basic formatting. Set A1:B1 text format to bold: worksheet. gspread-formatting This package provides complete cell formatting for Google spreadsheets using the popular gspread package, along with a few related features such as setting “frozen” rows and columns in a worksheet. Both basic and conditional formatting operations are supported.

Examples of gspread Usage, github.com › robin900 › gspread-formatting › blob › master › test gspread-formatting offers extensive functionality to help you when you go beyond basics. Using gspread with pandas ¶ pandas is a popular library for data analysis. The simplest way to get data from a sheet to a pandas DataFrame is with get_all_records ():

gspread, Cell formatting support for gspread. Contribute to robin900/gspread-formatting development by creating an account on GitHub. gspread-formatting This package provides complete cell formatting for Google spreadsheets using the popular gspread package, along with a few related features such as setting "frozen" rows and columns in a worksheet. Both basic and conditional formatting operations are supported.

Gspread get list of sheets
Examples of gspread Usage, Otherwise, you will get an Insufficient Permission error when you try to copy a spreadsheet. create (title Returns a list of all worksheets in a spreadsheet. So far we’ve been fetching a limited amount of data from a sheet. This works great until you need to get values from hundreds of cells or iterating over many rows or columns. Under the hood, gspread uses Google Sheets API v4. Most of the time when you call a gspread method to fetch or update a sheet gspread produces one HTTP API call.

gspread, Set up a gspread client: You'll need the client method openall(). It returns a list of spreadsheet objects. Then use a for-loop to add the title of the  gspread¶ gspread is a Python API for Google Sheets. Features: Google Sheets API v4. Open a spreadsheet by title, key or url. Read, write, and format cell ranges. Sharing and access control. Batching updates.

API Reference, This is really wonky. It will produce a list of tabs once, but I cannot figure out a way to get it to continually update the list of sheet names at some  gc = gspread.authorize (credentials) You’ll need the client method openall (). It returns a list of spreadsheet objects. Then use a for-loop to add the title of the spreadsheet to a list. 1. 2.

Python Google Sheets
Python Quickstart | Sheets API, We show code for an easy way to read and update a Google spreadsheet in Python using the gspread package and the Google Drive API. Click this button to create a new Cloud Platform project and automatically enable the Google Sheets API: Enable the Google Sheets API. In resulting dialog click DOWNLOAD CLIENT CONFIGURATION and

Google Spreadsheets and Python, gsheets is a small wrapper around the Google Sheets API (v4) to provide more convenient access to Google Sheets from Python scripts. Turn on the API,  How to Read and Write to Google Sheets With Python Google Setup. Before you jump into the code, there is some initial setup needed on the Google Sheets. First, create Python Setup. There are two main Python versions: 2.7 and 3.x. I'll be using 2.7, but it does not really matter what you

Google Sheets and Python, Learn to use Google APIs to read google spreadsheets data using python and update the data in the spreadsheet using python also. There are 3 ways to open a Google Sheet using Python: 1. Open Google Sheet by Name Here, we simply need to input the actual name of the Google Sheet that we created: gsheet = 2. Open Google Sheet by URL To open the Google Sheet using a URL, you would need to open your Google Sheet in the 3.

Google-sheets-api Python GitHub
burnash/gspread: Google Sheets Python API, gsheets. Latest PyPI Version License Supported Python Versions Format · Travis Codecov Readthedocs stable Readthedocs latest. gsheets is a small wrapper  This will create a JSON file stored in the notebook's directory, probably named sheets.googleapis.com-python.json; you should leave it there but not copy to GitHub About Demonstrations of using the Google Sheets API in Python

xflr6/gsheets: Pythonic wrapper for the Google Sheets API, pygsheets - Google Spreadsheets Python API v4 · Open, create, delete and share spreadsheets using title or key · Intuitive models - spreadsheet, worksheet, cell,  pygsheets - Google Spreadsheets Python API v4 A simple, intutive library for google sheets which gets most of your work done.

nithinmurali/pygsheets: Google Sheets Python API v4, Google Sheets Python API v4. python python-lib spreadsheet Python library to interact with Google Sheets V4 API Google/Excel Sheets API Python. Enable the Google Sheets API. In resulting dialog click DOWNLOAD CLIENT CONFIGURATION and save the file credentials.json to your working directory. Step 2: Install the Google Client Library. Run the following command to install the library using pip: pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

Gspread clear sheet
Plexiglas Sheets Wholesale, Clear Barriers For Social Distancing Easy Sterilization Safety Dividers. Free Shipping! gspread¶ gspread is a Python API for Google Sheets. Features: Google Sheets API v4. Open a spreadsheet by title, key or url. Read, write, and format cell ranges. Sharing and access control. Batching updates.

How to clear a range in google sheet via gspread, You want to clear the values of range on Google Spreadsheet. You want to achieve this using gspread with python. You have already been  At the method of values_clear(range) of gspread, range is required to be the string value of a1Notation. Ref sh.worksheet("WorksheetX").range("A3:J10000") returns the list type which is not the string.

API Reference, Lower-level method that directly calls spreadsheets.values.clear. The class that represents a single sheet in a spreadsheet (aka “worksheet”). acell (label  So far we’ve been fetching a limited amount of data from a sheet. This works great until you need to get values from hundreds of cells or iterating over many rows or columns. Under the hood, gspread uses Google Sheets API v4. Most of the time when you call a gspread method to fetch or update a sheet gspread produces one HTTP API call.

</string>
					<key>Date Created</key>
					<string>2021-01-27 22:22:38 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 22:29:41 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://www.xspdf.com/resolution/56895534.html</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>gspread-python</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:11:13 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:11:15 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2021-01-27 01:11:13 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:11:13 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>maps the data read as a dictionary, whose keys, unless specified are the first row of the CSV</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-25 17:03:40 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-25 17:03:58 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function DeleteOldEntries() {
var ss = SpreadsheetApp.getActiveSpreadsheet();
var sheet = ss.getSheetByName("Live Events");//assumes Live Events is the name of the sheet
var datarange = sheet.getDataRange();
var lastrow = datarange.getLastRow();
var values = datarange.getValues();// get all data in a 2D array

var currentDate = new Date();//today

for (i=lastrow;i&gt;=3;i--) {
var tempDate = values[i-1][2];// arrays are 0 indexed so row1 = values[0] and col3 = [2]
if ((tempDate!=NaN) &amp;&amp; (tempDate &lt;= currentDate))
{
  sheet.deleteRow(i);
}//closes if
}//closes for loop
}//closes function</string>
					<key>Date Created</key>
					<string>2021-01-25 17:03:40 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-25 17:43:06 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://stackoverflow.com/questions/41114435/google-sheets-delete-expired-rows-based-on-date</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Delete Expired/Old Rows</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 21:10:01 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-29 21:11:26 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># syntax


</string>
					<key>Date Created</key>
					<string>2020-12-29 21:10:01 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 22:02:25 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string># legend

# reference</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=SS_FUNCTIONS(Template)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 08:08:54 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 08:09:32 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function CreaPDF() {
  //The function prints an invoice to PDF. First it copies spreadsheet to a new document.
  //Deletes all sheet except the one to print. Saves it to PDF. 
  //It overwrites any existing doc with same name.

  var sourceSpreadsheet = SpreadsheetApp.getActive();          
  var sheetName = "Factura";
  var folderID = getParentFolder(); // Folder id to save in a folder.
  var sourceSheet = sourceSpreadsheet.getSheetByName(sheetName);
  var folder = DriveApp.getFolderById(folderID); 
  var numf = sourceSpreadsheet.getRangeByName("NumeroFactura").getValue();
  var anof = numf.split("/",2);   // Seeks number and year -&gt; filename 

  var pdfName = anof[1] +"_Factura_" + anof[0]+ "_Dra_Salazar"; // Nombre del documento;

  SpreadsheetApp.getActiveSpreadsheet().toast('Creando PDF');

  // export url
  var url = 'https://docs.google.com/spreadsheets/d/'+sourceSpreadsheet.getId()+'/export?exportFormat=pdf&amp;format=pdf' // export as pdf / csv / xls / xlsx
  + '&amp;size=A4'                           // paper size legal / letter / A4
  + '&amp;portrait=true'                     // orientation, false for landscape
  + '&amp;fitw=false'                        // fit to page width, false for actual size
  + '&amp;sheetnames=false&amp;printtitle=false' // hide optional headers and footers
  + '&amp;pagenumbers=false&amp;gridlines=false' // hide page numbers and gridlines
  + '&amp;fzr=false'                         // do not repeat row headers (frozen rows) on each page
  + '&amp;gid='+sourceSheet.getSheetId();    // the sheet's Id

  var token = ScriptApp.getOAuthToken();

  // request export url
  var response = UrlFetchApp.fetch(url, {
    headers: {
      'Authorization': 'Bearer ' +  token
    }
  });

  var theBlob = response.getBlob().setName(pdfName+'.pdf');

  // delete pdf if already exists
  var files = folder.getFilesByName(pdfName);
  while (files.hasNext())
  {
    files.next().setTrashed(true);
  }

  // create pdf
  var newFile = folder.createFile(theBlob);

  return true;
}</string>
					<key>Date Created</key>
					<string>2021-01-30 08:08:54 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 08:09:19 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>ry this solution based on https://ctrlq.org/code/19869-email-google-spreadsheets-pdf

Using export url parameters you can set needed options for result pdf. Also you can set specific id of sheet to export, so you don't need to make duplicate of your whole spreadsheet anymore.

https://stackoverflow.com/questions/45209619/google-apps-script-getasapplication-pdf-layout/45211625</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>oogle apps script getAs('application/pdf') layout</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 03:01:59 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 03:02:12 -0500</string>
			<key>Folder</key>
			<string>SpaceVim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>relativenumber=false
</string>
					<key>Date Created</key>
					<string>2021-01-30 03:01:59 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 03:02:41 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://askubuntu.com/questions/1038836/disabling-relative-line-numbers-in-spacevim</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>disable relativenumbers on init.toml</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 01:03:35 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 17:58:36 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function insertRows() {
  var startRow = 10;
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName("test");

  var sourceRange = sheet.getRange(startRow, 1, sheet.getLastRow());
  var sheetData = sourceRange.getValues();

  var numRows = sourceRange.getNumRows() - startRow;
//  Logger.log(numRows);

  for (var i=numRows; i &gt; -1; i--) {
    if (sheetData[i].join("")) {
      sheet.insertRowsAfter(i + startRow, 5);
    }
  }
}
</string>
					<key>Date Created</key>
					<string>2021-01-29 01:03:35 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 17:58:56 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://stackoverflow.com/questions/45510968/google-apps-script-insert-x-rows-after-every-cells-in-range</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Google Apps Script : Insert x rows after every cells in range</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:08:50 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:09:07 -0500</string>
			<key>Folder</key>
			<string>js</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>/* Route
 * All Request with Method Get will be proces here
 */
function doGet(req) {
   var action = req.parameter.action;

   var db = SpreadsheetApp.openById("YOUR SPREADSHEET ID");
  
   // Don't forget to change your Sheet Name by default is 'Sheet1'
   var sheetUsers = db.getSheetByName("Users");
   
   switch(action) {
       case "read":
           return doRead(req, sheetUsers);
           break;
       case "insert":
           return doInsert(req, sheetUsers);
           break;
       case "update":
           return doUpdate(req, sheetUsers);
           break;
       case "delete":
           return doDelete(req, sheetUsers);
           break;
       default:
           return response().json({
              status: false,
              message: 'silent!'
           });
   }
}

/* Read
 * request for all Data
 *
 * @request-parameter | action&lt;string&gt;
 * @example-request | ?action=read
 */
function doRead(request, sheetObject) 
{
   var data = {};
   
   data.records = _readData(sheetObject);

   return response().json(data);

}

/* Insert
 *
 */
function doInsert(req, sheet) {
   var id = req.parameter.id;
   var username = req.parameter.username;
   var email = req.parameter.email;
   // all data your needed

   var flag = 1;
   var Row = sheet.getLastRow();
   for (var i = 1; i &lt;= Row; i++) {
      /* getRange(i, 2) 
       * i | is a row index
       * 1 | is a id column index ('id')
       */
      var idTemp = sheet.getRange(i, 1).getValue();
      if (idTemp == id) {
         flag = 0;
         var result = "Sorry bratha, id already exist";
      }
   }
   
   // add new row with recieved parameter from client
   if (flag == 1) {
      var timestamp = Date.now();
      var currentTime = new Date().toLocaleString(); // Full Datetime
      var rowData = sheet.appendRow([
         id,
         username,
         email,
         timestamp,
         currentTime
      ]);
      var result = "Insertion successful";
   }

   return response().json({
      result: result
   });
}

/* Update
 * request for Update
 *
 * @request-parameter | id&lt;string&gt;, data&lt;JSON&gt;, action&lt;string&gt;
 * @example-request | ?action=update&amp;data={"email":"ryandevstudio@gmail.com", "username":"nyancodeid"}
 */
function doUpdate(req, sheet) 
{
   var id = req.parameter.id;
   var updates = JSON.parse(req.parameter.data);
  
   var lr = sheet.getLastRow();

   var headers = _getHeaderRow(sheet);
   var updatesHeader = Object.keys(updates);
   
   // Looping for row
   for (var row = 1; row &lt;= lr; row++) {
      // Looping for available header / column
      for (var i = 0; i &lt;= (headers.length - 1); i++) {
         var header = headers[i];
         // Looping for column need to updated
         for (var update in updatesHeader) {
            if (updatesHeader[update] == header) {
               // Get ID for every row
               var rid = sheet.getRange(row, 1).getValue();

               if (rid == id) {
                  // Lets Update
                  sheet.getRange(row, i + 1).setValue(updates[updatesHeader[update]]);
               }
            }
         }
      }
   }

   
   // Output
   return response().json({
      status: true,
      message: "Update successfully"
   });
}


/* Delete
 *
 */
function doDelete(req, sheet) {
   var id = req.parameter.id;
   var flag = 0;

   var Row = sheet.getLastRow();
   for (var i = 1; i &lt;= Row; i++) {
      var idTemp = sheet.getRange(i, 1).getValue();
      if (idTemp == id) {
         sheet.deleteRow(i);
         
         var result = "deleted successfully";
         flag = 1;
      }

   }

   if (flag == 0) {
      return response().json({
         status: false,
         message: "ID not found"
      });
   }

   return response().json({
      status: true,
      message: result
   });
}


/* Service
 */
function _readData(sheetObject, properties) {

   if (typeof properties == "undefined") {
      properties = _getHeaderRow(sheetObject);
      properties = properties.map(function (p) {
         return p.replace(/\s+/g, '_');
      });
   }

   var rows = _getDataRows(sheetObject),
      data = [];

   for (var r = 0, l = rows.length; r &lt; l; r++) {
      var row = rows[r],
          record = {};

      for (var p in properties) {
         record[properties[p]] = row[p];
      }

      data.push(record);
   }
   
   return data;
}
function _getDataRows(sheetObject) {
   var sh = sheetObject;

   return sh.getRange(2, 1, sh.getLastRow() - 1, sh.getLastColumn()).getValues();
}
function _getHeaderRow(sheetObject) {
   var sh = sheetObject;

   return sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
}
function response() {
   return {
      json: function(data) {
         return ContentService
            .createTextOutput(JSON.stringify(data))
            .setMimeType(ContentService.MimeType.JSON);
      }
   }
}</string>
					<key>Date Created</key>
					<string>2021-01-28 21:08:50 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:09:09 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Google Script CRUD</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 23:34:20 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 23:34:25 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>from sheetfu import SpreadsheetApp
from sheetfu import Table

spreadsheet = SpreadsheetApp('path/to/secret.json').open_by_id('&lt;spreadsheet id&gt;')
data_range = spreadsheet.get_sheet_by_name('sheet name').get_data_range()

table = Table(data_range)

for item in table:
    impression_value = item.get_field_value('Impressions')
    if impression_value[0] = "'":
        impression_value = impression_value[1:]
        item.get_set_value('Impressions', impression_value)

table.commit()</string>
					<key>Date Created</key>
					<string>2021-01-27 23:34:20 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 23:34:56 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://stackoverflow.com/questions/59701452/how-to-update-cells-in-a-google-spreadsheet-with-python-s-gspread-wks-update-cel</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How to update cells in a google spreadsheet with python’s gspread wks.update_cells</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 01:03:44 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 01:04:48 -0500</string>
			<key>Folder</key>
			<string>SXMP</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=ArrayFormula( CONCATENATE( E3:N3 &amp; CHAR(10) ) )</string>
					<key>Date Created</key>
					<string>2021-01-29 01:03:44 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 01:04:11 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>E - N</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=ArrayFormula( CONCATENATE( O3:X3 &amp; CHAR(10) ) )</string>
					<key>Date Created</key>
					<string>2021-01-29 01:04:06 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 01:04:38 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>O - X</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=ArrayFormula( CONCATENATE( Y3:AH3 &amp; CHAR(10) ) )</string>
					<key>Date Created</key>
					<string>2021-01-29 01:04:48 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 01:27:17 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Y - AH</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>SOX</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:06:03 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:06:14 -0500</string>
			<key>Folder</key>
			<string>js</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>const { Builder } = require('selenium-webdriver');         // Currently using ^3.6.0
const firefox     = require('selenium-webdriver/firefox'); // Currently using ^3.6.0

// Create a builder for browser 'firefox'
let builder = new Builder().forBrowser('firefox');

// I then create firefox options
let options = new firefox.Options();

// setPreference is present in the docs as well as the type file for this version
// But is present in this docs: https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/firefox_exports_Options.html
// will fail: TypeError: options.setPreference is not a function
options.setPreference('lightweightThemes.selectedThemeID', 'default-theme@mozilla.org');

// Then I build it
builder.setFirefoxOptions(options);
builder.build();

// Running it: node test.js</string>
					<key>Date Created</key>
					<string>2021-01-28 21:06:03 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:06:16 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>selenium-webdriver</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 08:10:26 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 08:10:44 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function doGet() {
  /*
   *  This spreadsheet may not be active while this function 
   *  executes, so you cannot get access to active spreadsheet, 
   *  use open by id.
   *
   */
  var ss = SpreadsheetApp.openById("[[ this spreadsheet id ]]");

  var SheetData = ss.getSheetByName("Data");
  
  var template = HtmlService
      .createTemplateFromFile("Template.html");

  // Assign 'data' to the template object
  template.data = SheetData.getDataRange().getValues();
  
  // Evaluate template object as html content
  var html = template.evaluate();

  // Convert html content to pdf
  // var pdf = html.getAs("application/pdf")
  //    .setName("Test_Data.pdf");

  // Or use this code
  var pdf = html.getAs(MimeType.PDF).setName("Test_Data.pdf");
  
  // Create...</string>
					<key>Date Created</key>
					<string>2021-01-30 08:10:26 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 08:10:45 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://subscription.packtpub.com/book/web_development/9781785882517/7/ch07lvl1sec64/converting-sheet-data-as-a-pdf-file</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Converting Sheet data as a PDF file</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 16:00:12 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:00:26 -0400</string>
			<key>Folder</key>
			<string>python3</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
df = pd.read_json(r'PATH/TO/file.json')
df.to_csv('output_file_name.csv')</string>
					<key>Date Created</key>
					<string>2020-10-01 16:00:12 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:53:44 -0400</string>
					<key>Language</key>
					<string>Python 3</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>json_to_csv.py</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-23 12:02:42 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-23 12:02:46 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=RIGHT(A2,LEN(A2)-FIND("@",A2))</string>
					<key>Date Created</key>
					<string>2020-12-23 12:02:42 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-23 12:02:50 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>To extract domain from email address</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-18 17:50:42 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-18 17:50:54 -0500</string>
			<key>Folder</key>
			<string>python3</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># import packages
import re
import csv

file = 'captions.vtt'
opened_file = open(file,encoding='utf8')
content = opened_file.read()
segments = content.split('\n\n') # split on double line

# wrangle segments
m = re.compile(r"\&lt;.*?\&gt;") # strip/remove unwanted tags
o = re.compile(r"\.+\d+") # strip/remove miliseconds

def clean(content):
    new_content = m.sub('',content)
    new_content = o.sub('',new_content)
    new_content = new_content.replace('align:start position:0%','')
    new_content = new_content.replace('--&gt;','')
    return new_content

new_segments = [clean(s) for s in segments if len(s)!=0][2:]

# trim time codes for g suite plain text formatting conversion to seconds w/ formula '=value(str*24*3600)'
def clean_time(time):
    time = time.split(':')
    if time[0]=='00':
        return time[1]+':'+time[2]
    if not time[0]=='00':
        return time[0]+':'+time[1]+':'+time[2]

trimmed_segments = []
for segment in new_segments:
    split_segment = segment.split()
    time_code = split_segment[0]
    text = ' '.join(segment.split()[2:])
    trimmed_segment = (time_code, text)
    trimmed_segments.append(trimmed_segment)

# write output as csv file
with open(str(file)[:-3]+'csv', 'w', encoding='utf8', newline='') as f:
    for line in trimmed_segments:
        thewriter = csv.writer(f)
        thewriter.writerow(line)</string>
					<key>Date Created</key>
					<string>2020-11-18 17:50:42 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-19 22:50:58 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Convert VTT to CSV</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 22:28:32 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 22:28:48 -0500</string>
			<key>Folder</key>
			<string>grep-awk-sed</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>grep "boo" a_file</string>
					<key>Date Created</key>
					<string>2021-01-29 22:28:32 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 22:28:54 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>find a file(basic)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-18 18:23:58 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-18 18:24:11 -0500</string>
			<key>Folder</key>
			<string>cli-cheats</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>You can cancel current command with ⌃ CTRL+c. 
You can clear command to the beginning with ⌃ CTRL+u. 
To clear line after the cursor press ⌃ CTRL+K.

</string>
					<key>Date Created</key>
					<string>2020-11-18 18:23:58 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 22:40:16 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Clear Current CLI Line</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 08:12:40 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 08:13:00 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>// Simple function to add a menu option to the spreadsheet "Export", for saving a PDF of the spreadsheet directly to Google Drive.
// The exported file will be named: SheetName and saved in the same folder as the spreadsheet.
// To change the filename, just set pdfName inside generatePdf() to something else.

// Running this, sends the currently open sheet, as a PDF attachment
function onOpen() {
  var submenu = [{name:"Save PDF", functionName:"generatePdf"}];
  SpreadsheetApp.getActiveSpreadsheet().addMenu('Export', submenu);  
}

function generatePdf() {
  // Get active spreadsheet.
  var sourceSpreadsheet = SpreadsheetApp.getActive();
  
  // Get active sheet.
  var sheets = sourceSpreadsheet.getSheets();
  var sheetName = sourceSpreadsheet.getActiveSheet().getName();
  var sourceSheet = sourceSpreadsheet.getSheetByName(sheetName);
  
  // Set the output filename as SheetName.
  var pdfName = sheetName;

  // Get folder containing spreadsheet to save pdf in.
  var parents = DriveApp.getFileById(sourceSpreadsheet.getId()).getParents();
  if (parents.hasNext()) {
    var folder = parents.next();
  }
  else {
    folder = DriveApp.getRootFolder();
  }
  
  // Copy whole spreadsheet.
  var destSpreadsheet = SpreadsheetApp.open(DriveApp.getFileById(sourceSpreadsheet.getId()).makeCopy("tmp_convert_to_pdf", folder))

  // Delete redundant sheets.
  var sheets = destSpreadsheet.getSheets();
  for (i = 0; i &lt; sheets.length; i++) {
    if (sheets[i].getSheetName() != sheetName){
      destSpreadsheet.deleteSheet(sheets[i]);
    }
  }
  
  var destSheet = destSpreadsheet.getSheets()[0];

  // Repace cell values with text (to avoid broken references).
  var sourceRange = sourceSheet.getRange(1,1,sourceSheet.getMaxRows(),sourceSheet.getMaxColumns());
  var sourcevalues = sourceRange.getValues();
  var destRange = destSheet.getRange(1, 1, destSheet.getMaxRows(), destSheet.getMaxColumns());
  destRange.setValues(sourcevalues);

  // Save to pdf.
  var theBlob = destSpreadsheet.getBlob().getAs('application/pdf').setName(pdfName);
  var newFile = folder.createFile(theBlob);

  // Delete the temporary sheet.
  DriveApp.getFileById(destSpreadsheet.getId()).setTrashed(true);
}</string>
					<key>Date Created</key>
					<string>2021-01-30 08:12:40 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 08:13:36 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>install.txt
To use this script in Google Drive:

1. In your spreadsheet, click Tools-&gt;Script Editor.
2. Paste the contents of Code.gs into the editor.
3. Save.
4. Select "Allow" when Google asks about permissions.
5. Reload your spreadsheet.

You should now see a new file menu option, "Export".




https://gist.github.com/iTrauco/dbb81e44831d01cb92e94fcc565b7399</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Export a Google Drive spreadsheet to PDF in Google Drive in the same folder.</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 23:21:20 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-29 23:21:26 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=VLOOKUP(
    search_key,
    range,
    index,
    [is_sorted]
)</string>
					<key>Date Created</key>
					<string>2020-12-29 23:21:20 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 23:56:57 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string># legend
# search_key - the value(boolean, integer, float, string, etc) to search the 1ST column for
# range - the range/array to consider for the search
# index - the column number of value to be returned
# [is_sorted] options - ...
- FALSE = exact match, 
- TRUE = nearest match</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=VLOOKUP(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 14:14:39 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 14:14:53 -0500</string>
			<key>Folder</key>
			<string>Uncategorized</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=ArrayFormula(IFERROR(VLOOKUP( COLUMN(OFFSET(INDIRECT("a1"),,,1,numCols)) + (ROW(INDIRECT("a1:a"&amp;ROUNDUP(COUNTA(A1:A)/numCols)))-1)*numCols, {ROW(A1:A)-ROW(A1)+1,A1:A},2,)))

A1:A5 to E1:I1,
A6:A10 to E2:I2,
A11:A14 to E3:I3,
and so</string>
					<key>Date Created</key>
					<string>2021-01-27 14:14:39 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 14:16:07 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://sheetswithmaxmakhrov.wordpress.com/2017/12/26/how-to-transpose-every-5-or-n-rows-from-one-column-to-multiple-columns/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How to split Column to Multiple Rows / Columns</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 22:20:40 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:20:52 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>%!python -m json.tool</string>
					<key>Date Created</key>
					<string>2020-10-25 22:20:40 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:21:13 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>1.  Esc into Normal mode￼
2. Type :
3. Enter “%!python -m json.tool”</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Pretty print JSON in Vim</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 23:18:28 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 02:15:26 -0500</string>
			<key>Folder</key>
			<string>TDD</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2021-01-29 23:18:28 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 02:15:28 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://testdriven.io/blog/modern-tdd/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Pytest TDD Walkthrough</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:19:24 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:19:37 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import pandas as pd
import time
import csv
import paratext
import dask.dataframe
input_file = "random.csv"
start_time = time.time()
data = csv.DictReader(open(input_file))
print("csv.DictReader took %s seconds" % (time.time() - start_time))
start_time = time.time()
data = pd.read_csv(input_file)
print("pd.read_csv took %s seconds" % (time.time() - start_time))
start_time = time.time()
data = pd.read_csv("random.csv", chunksize=100000)
print("pd.read_csv with chunksize took %s seconds" % (time.time() - start_time))
start_time = time.time()
data = dask.dataframe.read_csv(input_file)
print("dask.dataframe took %s seconds" % (time.time() - start_time))</string>
					<key>Date Created</key>
					<string>2021-01-27 01:19:24 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:19:39 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>simple benchmarkinbg</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-24 01:44:41 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:24:33 -0400</string>
			<key>Folder</key>
			<string>Slack TS</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>#!/usr/bin/env bash

for x in &lt;path/to/file&gt;/*.json;
  do
    jsonlint -q "$x";</string>
					<key>Date Created</key>
					<string>2020-10-24 01:44:41 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:35:37 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>**For macOS**
1. Global install of NPM package JSONLINT
  1.`npm install jsonlint -g`
  **sudo may be required**
  2. `sudo npm install jsonlint -g`
2. Locally download the original data import file, [slack_data_file_name.zip ](&lt;G Drive Link&gt;)
3. Make a new directory and move the downloaded zip file into it for extraction w/ `unzip slack_data_file_name.zip`
4. Upon successful extraction of the data `rm -rf slack_data_file_name.zip `
5. Open a new terminal window and create the file `validate_slack_json.sh`
6. Using your editor of choice open `validate_slack_json.sh` and paste the following into the file
```
#!/usr/bin/env bash

for x in &lt;path/to/file&gt;/*.json;
  do
    jsonlint -q "$x";
```
7. Make the file executable w/ `chmod -x validate_slack_json.sh`
9. Temporarily disable the `echo` command for standard output w/ `stty -echoctl`
10. Run the script `sh validate_slack_json.sh`
11. Compress the folder that you ran the `validate_slack_json.sh` script on by running zip **recursively** w/ the `-r` flag:
```
zip -r output.zip target-directory
```
12.  Reenable echo standard output w/ `stty echoctl`
13. Move the newly compressed Slack data for import into G Drive
**Note** A full reverse of the prior failed data import must be completed before you attempt upload of the new file from G Drive
14. Try the Slack data import again w/ [Official Slack Data Import Instructions](http://itrau.co/HTImportSlackData)</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Validate Slack Json</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-21 01:49:43 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-21 01:50:19 -0500</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>
To create a new branch (locally):

With the commit hash (or part of it)

git checkout -b new_branch 6e559cb
or to go back 4 commits from HEAD

git checkout -b new_branch HEAD~4</string>
					<key>Date Created</key>
					<string>2020-11-21 01:49:43 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-21 01:49:57 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How can I switch my git repository to a particular commit</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 06:07:30 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 06:25:12 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=query(:F; "select AI, where A &gt;= "'Year(Today())'-'Month(Today())'-01" "; 0)

 where A &gt;= "'Year(TODAY())'-'Month(TODAY())'-01" 
 
 
 i don't wanna do this tonight, fuck it's morning
 '</string>
					<key>Date Created</key>
					<string>2021-01-29 06:07:30 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 06:26:49 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://infoinspired.com/google-docs/spreadsheet/how-to-filter-timestamp-in-query-in-google-sheets/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>sox last step using query, NO APPS SCRIPT🤯</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 24:58:09 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 01:03:51 -0500</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=======
To adjust the indent on three lines

Put the cursor anywhere in the first line.

Press V then jj to visually select the three lines.

Press &gt; to indent (shift text one 'shiftwidth' to the right), or press &lt; to shift left.

Press . to repeat the indent, or u to undo if you have shifted too far.

Type gv if you want to reselect the lines (not needed).
=======
Alternatively, if you know that you want to adjust three lines, you can simply:

Type 3&gt;&gt; to shift right or 3&lt;&lt; to shift left.

Or:

Type &gt;2j to shift right or &lt;2j to shift left.


As mentioned above, the &gt; and &lt; commands combine with arbitrary Vim movements and text objects. For example, &gt;} to indent from the cursor to the next blank line, or &lt;aB to un-indent the current C-like {...} "block" structure</string>
					<key>Date Created</key>
					<string>2021-01-30 24:58:09 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 01:02:13 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How to Indent for python:</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 16:17:33 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:21:03 -0400</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>="("&amp;C2&amp;")"</string>
					<key>Date Created</key>
					<string>2020-10-01 16:17:33 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:19:43 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>(Surround String of Another Cell)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 24:59:45 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:16:38 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import pandas as pd
import numpy as np
# setting the number of rows for the CSV file
N = 1000000
# creating a pandas dataframe (df) with 8 columns and N rows with random integers between 999 and 999999 and with column names from A to H
df = pd.DataFrame(np.random.randint(999,999999,size=(N, 7)), columns=list(‘ABCDEFG’))
# creating one column 'H' of float type using the uniform distribution
df[‘H’] = np.random.rand(N)
# creating two additional columns with random strings
df[‘I’] = pd.util.testing.rands_array(10, N)
df[‘J’] = pd.util.testing.rands_array(10, N)
# print the dataframe to see what we have created
print df
# export the dataframe to csv using comma delimiting
df.to_csv(“random.csv”, sep=’,’)</string>
					<key>Date Created</key>
					<string>2021-01-27 24:59:45 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:05:28 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://medium.com/casual-inference/the-most-time-efficient-ways-to-import-csv-data-in-python-cc159b44063d</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>random_data_csv.py</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:05:27 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:05:39 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>Skip to content
 
Search…
All gists
Back to GitHub
@iTrauco 
@eojji
eojji/JavaScript.html
Created 3 years ago • Report abuse
1
0
 Code
 Revisions 1
 Stars 1
&lt;script src="https://gist.github.com/eojji/73ef2b6f55cd38953c1c5e767cc56777.js"&gt;&lt;/script&gt;
Copy to team drive - review. Listing folders - 8 https://m.cafe.naver.com/eojji/311
code.gs
// Web App Exec: 
// https://script.google.com/macros/s/AKfycbxa1mBiEPGwHpVDxw6V6p1bRBWSXHm8qbIea7Kjmv9rQUyv68_Z/exec
function doGet(request) {
  var output = HtmlService.createTemplateFromFile('Page').evaluate();
  return output.addMetaTag('viewport', 'width=device-width, initial-scale=1');
}
   
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename)
  .getContent();
}

function copyDriveFile_(title, fileId, parentId) {
  var resource = {
    'title': title,
    parents: [{ id: parentId }]
  };  
  
  var optionalArgs = {
    supportsTeamDrives : true
  };
  
  try {
    return Drive.Files.copy(resource, fileId, optionalArgs);
  } catch(error) {
    return error; // error.name, error.message;
  }
}

function createFolderSpreadsheet_(title, folderId) {
  var ssNew, ssId, sheetFolder, sheetFiles;
  var title = '_gfolder, ' + Date.now() + ' ' + title;
  try {
    ssNew = SpreadsheetApp.create(title);    
    sheetFolder = ssNew.getSheets()[0]; 
    sheetFolder.setName('folder');    
    sheetFolder.appendRow(["row to read", 3]);
    sheetFolder.appendRow(["title", "id", "id2", "files", "fileSize", "start", "end", "file row", "parent"]);
    
    // files    
    sheetFiles = ssNew.insertSheet('files');
    sheetFiles.appendRow(["row to read", 3, "page token"]);
    sheetFiles.appendRow(['title', 'id', 'mime', 'size', 'copy', 'name', 'message', 'check', 'parent']);
    
    // https://developers.google.com/drive/api/v2/reference/parents/insert
    var resource= { "id": folderId };    
    var optionalArgs = { "supportsTeamDrives" : true };        
    // Drive.Parents.insert(resource, fileId, optionalArgs);
    ssId = ssNew.getId();    
    Drive.Parents.insert(resource, ssId, optionalArgs);
    Drive.Parents.remove(ssId, DriveApp.getRootFolder().getId());
    
    return ssNew;
  } catch(e) {
    console.warn('Error: %s, %s - createFolderSpreadsheet: %s', e.name, e.message, folderId);
  }
}

function fileCopyFromInput_(file, folderId) {
  var appMessage = {};
  if (! file.copyable) {
    appMessage.url = file.alternateLink;
    appMessage.title = file.title;
    appMessage.message = 'The file can not be copied to My Drive.';
    return appMessage;              
  }        
  
  var aCopy = copyDriveFile_(file.title, file.id, folderId);    
  if (aCopy.id) {
    // console.log('Title: %s, Mimetype: %s, ID: %s', aCopy.title, aCopy.mimeType, aCopy.id);   
    appMessage.url = aCopy.alternateLink;
    appMessage.title = aCopy.title;
    appMessage.message = 'The copy is complete. Size: ' + aCopy.fileSize;            
  } else if (aCopy.name) {
    console.warn('An error occurred while copying. Error Name: %s, Message: %s', aCopy.name, aCopy.message);      
    appMessage.message = 'An error occurred while copying. '+aCopy.name+ ', Message: '+ aCopy.message;
    appMessage.url = file.alternateLink;
    appMessage.title = file.title;        
  }
  return appMessage;                
}

function getFolderByGdUrl_(url) {
  var idx = url.lastIndexOf('google.com');
  if (idx &lt; 0) {    
    var rtn = url.match(/[-\w]{15,}/);
    if (rtn) {
      return getDriveFileById_(rtn[0]);
    } 
    return;    
  }
  
  var decUrl = url.substr(idx+10);
  var arr = ["/d/", "/folders/", "?id=", "&amp;id="];    
  for (var i=0; i&lt;arr.length; i++) {
    idx = decUrl.indexOf(arr[i]);
    if (idx &lt; 0) { 
      continue; 
    }
    var str = decUrl.substr(idx + arr[i].length);
    var idMatchStr = str.match(/[-\w]{15,}/);
    if (idMatchStr) {
      return getDriveFileById_(idMatchStr[0]);        
    } else {
      return;
    }    
  }  
}

function setPageTokenProperty(value) {
  PropertiesService.getUserProperties().setProperty('PAGE_TOKEN', value);  
}  

function getPageTokenProperty() {
  var pageTokenProperty = PropertiesService.getUserProperties().getProperty('PAGE_TOKEN');  
  return pageTokenProperty;  
}

function deletePageTokenProperty() {
  PropertiesService.getUserProperties().deleteProperty('PAGE_TOKEN');
}

function doCopyFolder_(sheetFolder, folderRowNum, sheetFiles, startTime) {
  var folderRange, folderInfo;
  try {
    folderRange = sheetFolder.getRange(folderRowNum, 1, 1, 9);
    folderInfo = folderRange.getValues()[0];
  } catch(e) {
    console.warn('Error: %s, %s - doCopyFolder', e.name, e.message);
    return '-1';
  }
  
  var title, folderId, copyFolderId, fileRowNum;
  title = folderInfo[0];
  folderId = folderInfo[1];
  copyFolderId = folderInfo[2];
  fileRowNum = folderInfo[7];    
  if (!fileRowNum || fileRowNum &lt; 3) {
    var pageToken;
    var objFiles = listFilesByPageToken_(folderId, pageToken, startTime);
    if (!objFiles) {
      return '9';
    }
    
    var parentId = folderInfo[8];
    var resp = insertFolderById_(parentId, title);
    if (!resp || !resp.id) {
      console.warn('Error: %s, %s - insertFolderById(parentId: %s, %s)', resp.name, resp.message, parentId, title);
      return '-1';
    } 
    
    folderInfo[7] = sheetFiles.getLastRow() + 1; // fileRowNum
    sheetAppendFiles_(resp.id, objFiles.files, sheetFolder, sheetFiles);      
    folderInfo[2] = resp.id; // copyFolderId   
    folderRange.setValues([folderInfo]); 
    
    if (objFiles.pageToken) {
      setPageTokenProperty(folderId+','+objFiles.pageToken);
      return '1';   
    }
    return copyFilesBySheet_(startTime, sheetFiles);   
  }
  
  var pageTokenProperty = getPageTokenProperty();
  if (pageTokenProperty) {
    var arrIdAndPageToken = pageTokenProperty.split(',');
    if (arrIdAndPageToken[0] == folderId &amp;&amp; arrIdAndPageToken[1]) {
      var objFiles = listFilesByPageToken_(folderId, arrIdAndPageToken[1], startTime);
      if (objFiles) {
        sheetAppendFiles_(copyFolderId, objFiles.files, sheetFolder, sheetFiles); 
        if (objFiles.pageToken) {
          setPageTokenProperty(folderId+','+objFiles.pageToken);
          return '1';
        }
      }
    } else {
      deletePageTokenProperty();
    }
  }
  
  return copyFilesBySheet_(startTime, sheetFiles);   
}

function sheetAppendFiles_(parentId, data, sheetFolder, sheetFiles) {
  if (!data || data.length &lt; 1) {
    return;
  }
  
  var folderData = [];
  var newDate = new Date();
  // title, id
  // id2, files, fileSize, start, end, file row, parent																	
  var newFolderContents = ['', 0, 0, newDate, newDate, 0, parentId];
  
  var fileData = [];
  // copy, name, message, check, parent
  var newFileContents = ['', '', '', '', parentId];
  
  var len = data.length;
  for (var i = 0; i &lt; len; i++) {
    // title, id, mimeType, fileSize
    var mimeType = data[i][2]; // mimeType
    if (mimeType == 'application/vnd.google-apps.folder') {
      folderData.push(data[i].slice(0, 2).concat(newFolderContents));
    } else {
      fileData.push(data[i].concat(newFileContents));
    }
  }
  
  if (folderData &amp;&amp; folderData.length &gt; 0) {
    sheetFolder.getRange(sheetFolder.getLastRow() + 1, 1, folderData.length, folderData[0].length).setValues(folderData);
  }
  
  if (fileData &amp;&amp; fileData.length &gt; 0) {
    sheetFiles.getRange(sheetFiles.getLastRow() + 1, 1, fileData.length, fileData[0].length).setValues(fileData);
  }
}

function insertFolderById_(parentId, folderName) {
  var resource= {
    "parents": [
      {
        "id": parentId
      }
    ],
    "title": folderName,
    "mimeType": "application/vnd.google-apps.folder"
  };    
  
  // https://stackoverflow.com/questions/28378738/create-a-new-blob-in-memory-using-apps-script
  // var blob = Utilities.newBlob(folderName);    
  
  var optionalArgs = {
    supportsTeamDrives : true
  };
  
  // var folder;
  try {
    // https://developers.google.com/drive/v2/reference/files#resource
    return Drive.Files.insert(resource, Utilities.newBlob(folderName), optionalArgs); 
  } catch(error) {    
    return error;
  }
}

function triggerAfterByName(functionName, time) {
  ScriptApp.newTrigger(functionName)
  .timeBased().after(time).create();
  
  console.log('%s, %s, Time: %s - trigger AfterByName', Session.getEffectiveUser().getEmail(), functionName, time);
}

function setFolderSSIdProperty(value) {
  return PropertiesService.getUserProperties().setProperty('FOLDER_SS_ID', value);
}

function getFolderSSIdProperty() {
  return PropertiesService.getUserProperties().getProperty('FOLDER_SS_ID');
}

function deleteFolderSSIdProperty() {
  return PropertiesService.getUserProperties().deleteProperty('FOLDER_SS_ID');
}

function deleteTriggerByName(name) {
  var getPropTrigger = PropertiesService.getUserProperties().getProperty('atHour'+name);
  if (!getPropTrigger) {
    getPropTrigger = 'x';
  }
  
  var triggers = ScriptApp.getProjectTriggers();    
  for (var i = 0; i &lt; triggers.length; i++) {
    if (triggers[i].getHandlerFunction() == name &amp;&amp; triggers[i].getUniqueId() != getPropTrigger) {
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
}

// https://developers.google.com/drive/v2/reference/files
function getDriveFileById_(id) {
  var optionalArgs = {
    supportsTeamDrives : true
  };
  
  try {
    return Drive.Files.get(id, optionalArgs);
  } catch(error) {         
    return error; // error.name, error.message;
  }
}

function getSpreadsheetById(ssId) {
  if (!ssId || ssId &lt; 10) {
    console.warn('!ssId || ssId.length &lt; 10 - getSpreadsheetById');
    return;
  }
  
  try {
    var resp = getDriveFileById_(ssId);
    if (resp.id &amp;&amp; !resp.labels.trashed) {
      return SpreadsheetApp.openById(ssId);
    }    
  } catch(e) {
    console.warn('Error: %s, %s - DriveApp.getFileById(%s) in getSpreadsheetById', e.name, e.message, ssId);
  }  
}

/*
 * check: 파일 복사 함수 호출의 반환값으로 다음 작업을 결정합니다.
 * '1': 계속 진행 
 * '-1': 프로세스 중단
 * '-2': after 트리거 생성
 * '-3': hour  트리거 생성
**/

function callFileCopy_(title, id, parentId) {
  var copiedState = {
    copy: '1',
    link: '',  // or Error name
    message: 'Ok', 
    check: '1'
  }
  
  var resource = {
    'title': title,
    parents: [{ id: parentId }]
  };  
  
  var optionalArgs = {
    supportsTeamDrives : true
  };
  
  var resp;
  try {
    resp = Drive.Files.copy(resource, id, optionalArgs);
    if (resp &amp;&amp; resp.id) {
      copiedState.link = resp.alternateLink; 
      return copiedState;
    }    
  } catch(error) {
    resp = error; // error.name, error.message;
  }
  
  copiedState.copy = '0'; // Not copy
  
  var rowContents;
  
  var thisFunctionName = 'Call Drive.Files.copy';
  var email = Session.getEffectiveUser().getEmail();
  if (!resp || !resp.name) {
    console.warn('%s, Error !resp.name, Title: %s - %s', email, title, thisFunctionName);
    
    copiedState.link = '';
    copiedState.message = '';
    copiedState.check = '-2';
    return copiedState;
  }
  
  copiedState.link = resp.name;
  copiedState.message = resp.message;
  
  console.warn('%s, Error: %s, Message: %s, Title: %s - %s', email, resp.name, resp.message, title, thisFunctionName);
  
  if (resp.message.indexOf('User rate limit exceeded') &gt;= 0) {
    copiedState.check = '-3'; // create trigger, hour
  } else if (resp.message.indexOf('The user has exceeded') &gt;= 0 || 
             resp.message.indexOf('The file limit for this Team Drive') &gt;= 0) {
    copiedState.check = '-1'; // process kill 
  } else {
    copiedState.check = '1'; // Skip
    // Error Name: Exception
    // 'Internal Error'
    // '빈 응답'
  }
  return copiedState;
}

function copyFilesBySheet_(startTime, sheet) {
  var lastRow = sheet.getLastRow();
  if (!lastRow || lastRow &lt; 3) {
    return '9';
  }
  
  var startRow = sheet.getRange('B1').getValue();
  if (!startRow || startRow &lt; 3) {
    startRow = 3;
  }
  
  if (startRow &gt; lastRow) {
    return '9';
  }
  
  var rows = lastRow - startRow + 1;
  var fileValues = sheet.getRange(startRow, 1, rows, 9).getValues();
  var fileCont;
  var valuesCopyfile = [];  
  for (var idx = 0; idx &lt; rows; idx++) {
    fileCont = fileValues[idx]
    var title = fileCont[0];
    var id = fileCont[1];
    var parent = fileCont[8];
    var copiedState = callFileCopy_(title, id, parent);  
    var arr = [copiedState.copy];
    arr.push(copiedState.link);
    arr.push(copiedState.message);
    arr.push(copiedState.check);    
    valuesCopyfile.push(arr);    
    
    if (copiedState.check === '1') {
      // console.log('copiedState.chek: %s === 1', copiedState.check);
    } else {       
      console.log('%s Not === 1, break copyFilesBySheet, copiedState.chek', copiedState.check);
      break;      
    }
    
    if (!timeCheck(startTime, 30000)) { // needTime: 30 sec
      break;
    }
    // end for var idx
  }

  var valuesLength = valuesCopyfile.length;  
  sheet.getRange(startRow, 5, valuesLength, valuesCopyfile[0].length).setValues(valuesCopyfile);
  
  var readToRow = (copiedState.check === '1') ? (startRow + valuesLength) : (startRow + valuesLength - 1);
  sheet.getRange('B1').setValue(readToRow);
  
  if (idx &gt;= rows) {
    return '9'; 
  }
  
  return copiedState.check;
}

function timeCheck(startTime, needTime) {
  var nowDate = new Date();
  //  remain = 6 min - ( now - start )
  var remain = 360000 - (nowDate.getTime() - startTime);
  if (remain &lt; needTime) {
    return false;
  } else {
    return true;
  }
}




function trigCpFolderBySheet_() {
  var newDate = new Date();  
  var COPY_START_TIME = newDate.getTime();
  
  // Deletes triggers
  var thisFunctionName = 'trigCpFolderBySheet_';  
  deleteTriggerByName(thisFunctionName);
  
  var ssId = getFolderSSIdProperty();
  if (!ssId || ssId.length &lt; 10) {
    console.warn('Error getProperty(FOLDER_SS_ID), %s', thisFunctionName);
    return;
  }
  
  var copyFolderSs = getSpreadsheetById(ssId);
  if (!copyFolderSs) {
    console.warn('getSpreadsheetById(%s), at %s', ssId, thisFunctionName);
    return;
  }
  
  var sheetFolder = copyFolderSs.getSheetByName('folder');    
  var sheetFiles = copyFolderSs.getSheetByName('files');  
  
  var folderRow = sheetFolder.getRange('B1').getValue(); // row to read
  
  var timeResp;  
  var title, id, id2, files, filesArrayLength, fileRow;
  var lastRowFiles, pageTokenProperty;
  do {
    var resp = doCopyFolder_(sheetFolder, folderRow, sheetFiles, COPY_START_TIME); 
    if (resp === '1') {
      if (!timeCheck(COPY_START_TIME, 120000)) {
        console.log('timeCheck -&gt; triggerAfter');
        triggerAfterByName(thisFunctionName, 1000); // trigger 기동
        return;
      }
    }
  } while(resp === '1');
}

function listFilesByPageToken_(folderId, pageToken, startTime) {
  var query = '"'+ folderId +'" in parents and trashed = false';
  var files, resp;
  var data = [];  
  var fileCont = [];
  do {
    files = Drive.Files.list({
      includeTeamDriveItems : true,
      supportsTeamDrives : true,
      q: query,
      maxResults: 100,
      pageToken: pageToken,
    });
    if (files.items &amp;&amp; files.items.length &gt; 0) {
      for (var i = 0; i &lt; files.items.length; i++) {
        var file = files.items[i];
        fileCont = [file.title]; // file.title, file.id, file.mimeType, file.fileSize
        fileCont.push(file.id);     
        fileCont.push(file.mimeType);
        if (!file.fileSize) {
          fileCont.push(0);
        } else {
          fileCont.push(file.fileSize);
        }            
        data.push(fileCont);        
      }
    }
    pageToken = files.nextPageToken;
  } while (pageToken &amp;&amp; timeCheck(startTime, 30000)); // needTime: 30 sec
  
  if (data.length &gt; 0) {
    var objFiles = {};
    objFiles.pageToken = pageToken;
    objFiles.files = data;
    return objFiles;
  }
}

function funcCopyFromInput_(argUrl, argFolder) {
  var appMessage = {};
  appMessage.url = argUrl;
  appMessage.title = argUrl;   
  
  if (!argUrl || argUrl.length &lt; 15) {
    appMessage.message = argUrl + ' is too short to be processed.';
    return appMessage;
  }
  
  var file = getFolderByGdUrl_(argUrl); // return Drive.Files.get(id, optionalArgs);
  if (!file || !file.id) {
    var appMessage = file;
    if (appMessage &amp;&amp; appMessage.name) {
      console.log('Error Name: %s, Message: %s, Form Input Url: %s', appMessage.name, appMessage.message, argUrl);      
      appMessage.message = 'Error Name: '+appMessage.name+', Message: '+appMessage.message;
    } else {
      console.log('Error input Url Validate. URL does not have file ID. [%s]', argUrl);
      appMessage.message = 'Error ['+argUrl+'] Validate.';
    }
    return appMessage;
  }
  
  var title = file.title;
  if (file.mimeType != 'application/vnd.google-apps.folder') {
    return fileCopyFromInput_(file, argFolder.id);
  } else {
    var ss = createFolderSpreadsheet_(title, argFolder.id);    
    var sheetFolder = ss.getSheets()[0];
    var newDate = new Date();
    sheetFolder.appendRow([title, file.id, '', 0, 0, newDate, newDate, 0, argFolder.id]);
    setFolderSSIdProperty(ss.getId());
    
    appMessage.url = ss.getUrl();
    appMessage.title = ss.getName();
    appMessage.message = 'Create Spreadsheet';
    
    // trigger 기동
    triggerAfterByName('trigCpFolderBySheet_', 1000);
    return appMessage;    
  }
}

function processForm(formObject) {
  var formFromUrl = formObject.fromFolder.trim();	
  var formToUrl = formObject.toFolder.trim();	
  
var appMessage = {};    
   var toFolder =  getFolderByGdUrl_(formToUrl);
  if (!toFolder || !toFolder.id) {
    console.warn('Error Get to folder');
    appMessage.message = 'Error Get to folder';
    return JSON.stringify(appMessage);  
  }

  var fcResp = funcCopyFromInput_(formFromUrl, toFolder);
  if (!fcResp) {    
    appMessage.url = 'https://drive.google.com';
    appMessage.title = 'My Drive';
    appMessage.message = 'can not copy!';
  } else {
    appMessage = fcResp;
  }
  return JSON.stringify(appMessage);  
}
JavaScript.html
&lt;script&gt;
window.addEventListener('load', function() {
  // console.log('Page is loaded');
});

// Prevent forms from submitting.
function preventFormSubmit() {
  var forms = document.querySelectorAll('form');
  for (var i = 0; i &lt; forms.length; i++) {
    forms[i].addEventListener('submit', function(event) {
      event.preventDefault();
    });
  }
}
window.addEventListener('load', preventFormSubmit);

function handleFormSubmit(formObject) {
  google.script.run.withSuccessHandler(updateUrl).processForm(formObject);
  formObject.fromFolder.value = '';		
}

function updateUrl(appMessage) {
  var json;
  if (appMessage) {
    json = JSON.parse(appMessage);
    if (json.url) {
      // var url  
      var div = document.getElementById('output');
      div.innerHTML = 'Link: &lt;a href="' + json.url + '" target="_blank"&gt;'+json.title+'&lt;/a&gt;';
    }      
    if (json.message) {
      var message = document.getElementById('message');
      message.innerHTML = 'Message: '+json.message;        
    }
  }
}      
&lt;/script&gt;
Page.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;base target="_top"&gt;
    &lt;?!= include('Stylesheet'); ?&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Copy to team drive review&lt;/h1&gt;
    &lt;a href="https://gfoldercopy.eojji.com/group" target="_blank"&gt;G folder copy group&lt;/a&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;form id="myForm" onsubmit="handleFormSubmit(this)"&gt;
    From: &lt;input name="fromFolder" type="text" required /&gt; &lt;br&gt;
	To: &lt;input name="toFolder" type="text" required /&gt;
    &lt;input type="submit" value="Copy" /&gt;
    &lt;/form&gt;
    &lt;br&gt;
    &lt;div id="message"&gt;Message: &lt;/div&gt;     
    &lt;div id="output"&gt;Link: &lt;/div&gt;    
    &lt;br&gt;    
    Create a &lt;a href="https://gsuite.google.com/learning-center/products/drive/get-started-team-drive/"&gt;Team Drive&lt;/a&gt;: &lt;a href="https://goo.gl/forms/1az5A9lwcG2HpL5s2"&gt;Request Form&lt;/a&gt;  |  &lt;a href="https://hi.eojji.com/"&gt;Contact&lt;/a&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;a href="https://copy.gfolder.net/" target="_blank"&gt;copy.gfolder.net&lt;/a&gt;  |  &lt;a href="https://hi.eojji.com/privacy" target="_blank"&gt;Privacy Policy&lt;/a&gt;    
    &lt;?!= include('JavaScript'); ?&gt;
  &lt;/body&gt;
&lt;/html&gt;
Stylesheet.html
&lt;style&gt;
p {
  color: green;
}
&lt;/style&gt;
@iTrauco
 
Leave a comment
No file chosen
Attach files by dragging &amp; dropping, selecting or pasting them.
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
</string>
					<key>Date Created</key>
					<string>2021-01-28 21:05:27 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:05:31 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>review</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 24:10:33 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 24:12:05 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials

gc = gspread.authorize(GoogleCredentials.get_application_default())

sh = gc.create('A new spreadsheet')

# Open our new sheet and add some data.
worksheet = gc.open('A new spreadsheet').sheet1

cell_list = worksheet.range('A1:C2')

import random
for cell in cell_list:
  cell.value = random.randint(1, 10)

worksheet.update_cells(cell_list)
# Go to https://sheets.google.com to see your new spreadsheet.</string>
					<key>Date Created</key>
					<string>2021-01-28 24:10:33 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 24:14:24 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>!pip install --upgrade gspread</string>
					<key>Title</key>
					<string>!pip install --upgrade gspread</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>from google.colab import auth
auth.authenticate_user()

import gspread
from oauth2client.client import GoogleCredentials

gc = gspread.authorize(GoogleCredentials.get_application_default())

worksheet = gc.open('Your spreadsheet name').sheet1

# get_all_values gives a list of rows.
rows = worksheet.get_all_values()
print(rows)

# Convert to a DataFrame and render.
import pandas as pd
pd.DataFrame.from_records(rows)</string>
					<key>Date Created</key>
					<string>2021-01-28 24:11:38 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 24:13:44 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>!pip install --upgrade gspread</string>
					<key>Title</key>
					<string>Importing data from Google Sheets</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Import / Export Sheet Data</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 20:25:00 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-30 23:21:54 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># syntax
FILTER(
    range,          
    condition,
    [options,...]
)</string>
					<key>Date Created</key>
					<string>2020-12-29 20:25:00 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 22:01:47 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string># legend
# range = range of cells to filter
# condition = the columns/row(corresponding to the column/row of the dataset), returns an array of booleans TRUE/FALSE
# [options,..] = second condition, can return an array of booleans TRUE/FALSE

https://spreadsheetpoint.com/filter-function-google-sheets/

</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=filter(IMPORTRANGE("URL","A:J"),INDEX(IMPORTRANGE("URL","A:J"),0,3)="Yes")</string>
					<key>Date Created</key>
					<string>2020-12-30 23:21:54 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 23:23:00 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://webapps.stackexchange.com/questions/87272/using-filter-or-importrange-to-bring-in-and-filter-data-from-another-spreadsheet</string>
					<key>Title</key>
					<string>ex_one</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=FILTER(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:08:01 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:08:07 -0500</string>
			<key>Folder</key>
			<string>js</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>curl -s https://api.github.com/repos/jgm/pandoc/releases/latest \
| grep "browser_download_url.*deb" \
| cut -d : -f 2,3 \
| tr -d \" \
| wget -qi -</string>
					<key>Date Created</key>
					<string>2021-01-28 21:08:01 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:08:08 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>One Liner to Download the Latest Release from Github Repo</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 18:43:23 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 18:44:07 -0400</string>
			<key>Folder</key>
			<string>macOS</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>stty -echoctl</string>
					<key>Date Created</key>
					<string>2020-10-25 18:43:23 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 18:46:28 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>KbSRC - https://itrau.co/3kp4CxE</string>
					<key>Title</key>
					<string>Temporarily Turn Off Echo</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>stty echoctl</string>
					<key>Date Created</key>
					<string>2020-10-25 18:44:07 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 18:44:42 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Turn On Echo</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Turn Off Echo in macOS CLI</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-02 12:28:21 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-02 12:28:21 -0500</string>
			<key>Folder</key>
			<string>Uncategorized</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-12-02 12:28:21 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-02 12:28:21 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>untitled snippet</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 23:31:32 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 23:32:43 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>test_list = ['Text in Row 1','Text in Row 2','Text in Row 3']

output_list = " ".join(str(x) for x in test_list)

print(output_list)
</string>
					<key>Date Created</key>
					<string>2021-01-27 23:31:32 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 23:31:57 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>And the output would be :

Text in Row 1 Text in Row 2 Text in Row 3

https://stackoverflow.com/questions/56450052/how-to-download-plain-text-from-google-spreadsheet-cell</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Download Plain Text from Cell</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 07:50:50 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 07:51:37 -0400</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=error.type(A1)&gt;0

=iserror(A1)=true

=type(A1)=16

=iferror(A1,true)</string>
					<key>Date Created</key>
					<string>2020-10-01 07:50:50 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 07:51:20 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>There are four formulas. Use any of the ones to highlight total error cells.</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>google sheets</string>
				<string>errors</string>
				<string>conditional formatting</string>
			</array>
			<key>Title</key>
			<string>Conditional Formatting: Errors</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 08:08:54 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 08:08:54 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2021-01-30 08:08:54 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 08:08:54 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>untitled snippet</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-02 18:06:24 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-02 18:07:03 -0400</string>
			<key>Folder</key>
			<string>VLOOKUP</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])

</string>
					<key>Date Created</key>
					<string>2020-10-02 18:06:24 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-02 18:07:14 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>lookup_value – the value that we want to find in the table_array
table_array – the range of cells containing the data we want to find or retrieve
col_index_num – the column number in the table_array corresponding to the information we want to retrieve, relative to the lookup_value
[range_lookup] – optional; value can either be TRUE or FALSE
if TRUE or omitted, VLOOKUP returns either an exact or approximate match
if FALSE, VLOOKUP will only find an exact match</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Comparing Two Columns</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-23 12:02:40 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-23 12:02:40 -0500</string>
			<key>Folder</key>
			<string>Uncategorized</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-12-23 12:02:40 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-23 12:02:40 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>untitled snippet</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:07:17 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:07:26 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>/**
 Title:   Google Apps Script for importing CSV files from Drive into Fulcrum
 Notes:   Be sure to manually run the getFiles() function at least once to authorize the script. Set a timed trigger to automate imports.
 Author:  Bryan R. McBride
 --CSV file format--
 latitude,longitude,name,color
 27.770787,-82.638039,Building 1,red
**/
 
var fulcrumToken = "abcdefghijklmnopqrstuvwxyz";
var fulcrumFormID = "a123b456-7c89-0123-4567-de8f910g0123";
var filesToImportFolder = "1_NGfsxszanv2evVJgfKMXxmU54SZ92FW";
var importedFilesFolder = "1l0KX8VWjhijsEylnnhGCVIdRmSzatglm";

function getFiles() {
  // get the CSV files in the specified Drive folder
  var files = DriveApp.getFolderById(filesToImportFolder).getFiles();
  // loop through the files
  while (files.hasNext()) {
    // get the file
    var file = files.next();
    // parse the CSV
    var data = Utilities.parseCsv(file.getBlob().getDataAsString());
    // pass the file and the parsed data to the import function
    importData(file, data);
  }
}

function importData(file, data) {
  // loop through the CSV rows skipping the first row headers
  for (var i = 1; i &lt; data.length; i++) {
    // build the record JSON expected by Fulcrum
    var record = {
      "record": {
        "form_id": fulcrumFormID,
        "status": "Imported", // hard coded status for imported records
        "latitude": data[i][0],
        "longitude": data[i][1],
        "form_values": {
          "2832": data[i][2], // name
          "0dda": {
            "choice_values": [
              data[i][3] // color
            ]
          }
        }
      }
    };

    // POST the record JSON to the Fulcrum API
    UrlFetchApp.fetch("https://api.fulcrumapp.com/api/v2/records.json", {
      "method": "POST",
      "contentType": "application/json",
      "payload": JSON.stringify(record),
      "headers": {
        "X-ApiToken": fulcrumToken,
        "Accept": "application/json"
      }
    });
  }

  // remove the CSV file from the "Files to Import" folder 
  file.getParents().next().removeFile(file);
  // add the removed CSV file to the "Imported Files" folder
  DriveApp.getFolderById(importedFilesFolder).addFile(file);
  // send the email notification with the record count
  sendEmail(data.length - 1);
}

function sendEmail(count) {
  MailApp.sendEmail({
    to: "someone@yourdomain.com",
    name: "Fulcrum Import Notifier",
    subject: count + " records imported into Fulcrum",
    htmlBody: "Congratulations! " + count + " records have been successfully imported into Fulcrum."
  });
}</string>
					<key>Date Created</key>
					<string>2021-01-28 21:07:17 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:07:31 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Google Apps Script for importing CSV files from Drive into Fulcrum</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-28 14:24:02 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-28 14:26:22 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import os
import pandas as pd


cwd = os.path.abspath('')
files = os.listdir(cwd)

df = pd.DataFrame()

for file in files:
    if file.endswith('.xlsx'):
        df = df.append(pd.read_excel(file), ignore_index=True)

df.to_excel('output.xlsx')</string>
					<key>Date Created</key>
					<string>2020-12-28 14:24:02 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-28 14:55:39 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://pythoninoffice.com/use-python-to-combine-multiple-excel-files/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Combine Excel Sheets to Master</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-01 17:00:51 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-01 17:01:14 -0400</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit
</string>
					<key>Date Created</key>
					<string>2019-08-01 17:00:51 -0400</string>
					<key>Date Modified</key>
					<string>2019-08-01 17:01:05 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>git</string>
				<string>git log</string>
			</array>
			<key>Title</key>
			<string>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-30 03:08:46 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-30 03:08:57 -0500</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>" turn absolute line numbers on
:set number
:set nu

" turn absolute line numbers off
:set nonumber
:set nonu

" toggle absolute line numbers
:set number!
:set nu!</string>
					<key>Date Created</key>
					<string>2021-01-30 03:08:46 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-30 03:09:08 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://jeffkreeftmeijer.com/vim-number/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Enable / Disable Relative Line Numbers</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 15:43:34 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:51:55 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>:mks ~/.SpaveVim.d/sessions/file_name.vim               to save sessions


:source ~/.SpaveVim.d/sessions/file_name.vim            to restore session:w


vim -S ~/.SpaveVim.d/sessions/file_name.vim             -run on vim initalization</string>
					<key>Date Created</key>
					<string>2020-10-01 15:43:34 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:51:17 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>sessions</string>
				<string>vim</string>
			</array>
			<key>Title</key>
			<string>sessions</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-02 19:17:49 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-02 19:17:57 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=LEFT(A1,LEN(A1)-3)

# Or more generally:

=LEFT(A1,LEN(A1)-[number of characters to remove])</string>
					<key>Date Created</key>
					<string>2020-11-02 19:17:49 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-02 19:18:43 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Source: http://spreadsheetpro.net/removing-the-last-x-number-of-characters-from-a-string-in-excel-and-google-spreadsheets/

Sometimes you want to remove some number of last letters from a string in your spreadsheet. For this you can use a very handy function: LEFT()

LEFT() returns the first X characters in a string, based on the amount of characters you specify. Like: LEFT(text,num_chars)

Say you want to remove the last 3 characters from a string in cell A1 you can use:

=LEFT(A1,LEN(A1)-3)

Or more generally:

=LEFT(A1,LEN(A1)-[number of characters to remove])

How does this LEFT() function work?
Say for example that in cell A1 you have a string “IncomeMAX” and you want to remove the last three characters (“MAX”):

First, LEN(A1) returns how long the string in cell A1 is: 8 characters
Then it subtracts 3, in order to leave out the last 3 characters: 8-3=5
Then LEFT() makes sure that only the first 5 characters from the left are returned: Income
That’s it! As always, let me know in the comments when you have any questions!</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Removing the last number of characters from a string in Excel and Google Spreadsheets</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 21:08:42 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-29 21:08:50 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># syntax
=MATCH(
    search_key,
    range,
    [search_type]
)</string>
					<key>Date Created</key>
					<string>2020-12-29 21:08:42 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 22:00:42 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string># legend
# search_key - the value to search for
# range - the one-dimensional array to search
# search_type - [OPTIONAL -1 by default] The manner5 in which to search
# OPTIONAL VALUES
# 1 - default value, causes MATCH to assume that the range is sorted in ascending order and return the largest value less than or equal to 'search_key'
# 0 - indicates exact match and is required in situations where RANGE IS NOT SORTED
# -1 - causes MATCH to assume that the range is sorted in descernding order and retuirn the smallest value greater then or equal to 'search_key'</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=MATCH(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-02 15:55:35 -0400</string>
			<key>Date Modified</key>
			<string>2020-12-10 24:43:36 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=$A2="any string"

=$B=TRUE</string>
					<key>Date Created</key>
					<string>2020-10-02 15:55:35 -0400</string>
					<key>Date Modified</key>
					<string>2020-11-24 17:16:28 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=$A2&lt;&gt;"" </string>
					<key>Date Created</key>
					<string>2020-12-10 24:43:36 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-10 24:43:54 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Empty Cell</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Whole Row Highlighting</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-02 16:03:30 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-02 16:03:41 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function deleteRows() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var rows = sheet.getDataRange();
  var numRows = rows.getNumRows();
  var values = rows.getValues();

  var rowsDeleted = 0;
  for (var i = 0; i &lt;= numRows - 1; i++) {
    var row = values[i];
    if (row[0] == 'Learn more' || row[0] == '') { // This searches all cells in columns A (change to row[1] for columns B and so on) and deletes row if cell is empty or has value 'delete'.
      sheet.deleteRow((parseInt(i)+1) - rowsDeleted);
      rowsDeleted++;
    }
  }
};</string>
					<key>Date Created</key>
					<string>2020-12-02 16:03:30 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-02 16:04:10 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://gist.github.com/dDondero/285f8fd557c07e07af0e#:~:text=Google%20Apps%20script%20function%20to%20delete%20rows%20based%20on%20value%20in%20cell.,-find%2Dcell%2Dvalue&amp;text=var%20row%20%3D%20values%5Bi%5D,or%20has%20value%20'delete'.</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>GAS - Delete Rows</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-30 18:17:33 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-30 18:21:40 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># syntax
=OFFSET(
    cell_reference,
    offset_rows,
    offset_columns,
    [height],
    [width]
)</string>
					<key>Date Created</key>
					<string>2020-12-30 18:17:33 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 18:25:34 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string># legend
# cell_reference - the startin reference cell(or base cell) from which the range of cells is displaced
# offset_rows - the number of rows the range of cells displaces by, value = integer
# offset_columns - num of columns a range of cells displaces
# [height] - an optional parameter that specifies the height of the returning range of cells
# [width] - optional parameter that specifies the width of the returning range of cells 
#

SRCKb - https://blog.sheetgo.com/google-sheets-formulas/offset-formula-google-sheets/
</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=OFFSET(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 22:21:33 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:22:29 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>:%s/\#/ /g</string>
					<key>Date Created</key>
					<string>2020-10-25 22:21:33 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:21:54 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Comments to Spaces</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Comments to Spaces</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:04:54 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:06:05 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import time
start_time = time.time()
do_something()
print(“%s seconds” % (time.time() — start_time))</string>
					<key>Date Created</key>
					<string>2021-01-27 01:04:54 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:37:02 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2021-01-27 01:06:05 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:37:04 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>A somewhat important point here is that there is overhead associated with timing itself. One way to see what the overhead is would be to run the script without anything to actually time.</string>
					<key>Title</key>
					<string>Fragment 2</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How to measure time efficiently</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-22 18:45:12 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-22 18:45:21 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=SUBSTITUTE(O2,CHAR(10),"," &amp; CHAR(10)) &amp;","</string>
					<key>Date Created</key>
					<string>2021-01-22 18:45:12 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-22 18:45:22 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>add delimiter to last line in every cell</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-29 20:31:56 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-30 23:23:54 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># syntax =INDEX(
    array,
    row_num,
    [col_num],
    [area_num]
)
</string>
					<key>Date Created</key>
					<string>2020-12-29 20:31:56 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-29 22:01:39 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>[TECHNICAL]
The INDEX function returns the value at a given position in a range or array. 

INDEX is frequently used together with the MATCH function. 

MATCH locates and feeds a position to INDEX,which returns the value at that position.

# legend

https://exceljet.net/excel-functions/excel-index-function</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=filter(
        IMPORTRANGE(
                    "URL",
                    "A:J"),
        INDEX(
             IMPORTRANGE(
                        "URL",
                        "A:J"),
             0,
             3)
        ="Yes")</string>
					<key>Date Created</key>
					<string>2020-12-30 23:23:54 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 23:30:10 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>filter &amp;&amp; importrange</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=INDEX(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-31 24:58:42 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-31 01:00:00 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-12-31 24:58:42 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-31 24:58:42 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=COUNT( FILTER( $A$2:$A$95, $A$2:$A$95 &lt;= $E$2, $A$2:$A$95 &gt;= $D$2 ))</string>
					<key>Date Created</key>
					<string>2020-12-31 24:58:51 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-31 24:59:14 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>filter_count</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=SUM(FILTER($B$2:$B$95, MONTH($A$2:$A$95)=12))
</string>
					<key>Date Created</key>
					<string>2020-12-31 01:00:00 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-31 01:00:24 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>sum-filter</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=COUNT(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 16:07:10 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:13:46 -0400</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=LEFT(B3,FIND(" ",B3)-1)</string>
					<key>Date Created</key>
					<string>2020-10-01 16:07:10 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:16:38 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Left ← </string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=MID(B2,FIND(" ",B2)+1,256)</string>
					<key>Date Created</key>
					<string>2020-10-01 16:13:46 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:16:49 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>→ Right </string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>← → First Whitespace Text Extraction</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 06:41:34 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 06:41:45 -0400</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>="("&amp;A2&amp;")"</string>
					<key>Date Created</key>
					<string>2020-10-01 06:41:34 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:04:08 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Insert Brackets Around Text In A Cell</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-26 15:11:38 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-26 15:11:47 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>/** 
* TITLE:
*     Hide a row if a value is inputted. 
*/

//**GLOBALS**
// Sheet the data is on.
var SHEET = "SNOW";
// The value that will cause the row to hide. 
var VALUE = true;
// The column we will be using 
var COLUMN_NUMBER = 1

function onEdit(e) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var activeSheet = ss.getActiveSheet();
  
  //Ensure on correct sheet.
  if(SHEET == activeSheet.getName()){
    var cell = ss.getActiveCell()
    var cellValue = cell.getValue();
    
    //Ensure we are looking at the correct column.
    if(cell.getColumn() == COLUMN_NUMBER){
      //If the cell matched the value we require,hide the row. 
      if(cellValue == VALUE){
        activeSheet.hideRow(cell);
      };
    };
  };
}</string>
					<key>Date Created</key>
					<string>2021-01-26 15:11:38 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 15:32:16 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Dynamic Row Hiding</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-15 23:46:35 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-15 23:46:53 -0400</string>
			<key>Folder</key>
			<string>Uncategorized</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>function setupKeyLogger() {
         document.onkeydown = function(e) {
           console.log(e);
         }
}</string>
					<key>Date Created</key>
					<string>2019-08-15 23:46:35 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 02:32:34 -0400</string>
					<key>Language</key>
					<string>Python</string>
					<key>Note</key>
					<string>
use just the following simple handler to output the key codes to the JavaScript console.</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>keycodes</string>
				<string>keyboard</string>
			</array>
			<key>Title</key>
			<string>output keycodes in js</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-25 22:22:22 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-25 22:22:40 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>ds(    delete first surrounding pair of parentheses
2ds(   delete second surrounding pair of parentheses
cs[{   change surrounding pair of square brackets into a pair of braces
See :help surround.</string>
					<key>Date Created</key>
					<string>2020-10-25 22:22:22 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-25 22:22:41 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Vim Surround</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-01 15:37:38 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-01 15:41:15 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=COUNTIF($A$1:$A$13,”?*”)+COUNT($A$1:$A$13)

</string>
					<key>Date Created</key>
					<string>2020-12-01 15:37:38 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-01 15:41:05 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://productivityspot.com/count-non-blank-cells-google-sheets/</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>=SUMPRODUCT(LEN(A1:A13)&gt;0)</string>
					<key>Date Created</key>
					<string>2020-12-01 15:41:15 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-01 15:41:36 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>SUMPRODUCT</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Count Cells If Not Blank Using COUNTIF function</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:17:50 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:18:25 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import paratext
data = paratext.load_csv_to_pandas(“random.csv”)</string>
					<key>Date Created</key>
					<string>2021-01-27 01:17:50 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:19:10 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>With paratext you can import csv either to pandas or to a dictionary similarly to two of the other methods I described above. In order to do either of those one can use the following code snippets:

As you can see in this reddit post Damian Eads (who apparently is the man behind Paratext) explains that you need a CSV file of at least 100 MBs in order to see the benefits of the library. The overhead or the initial load of setting up parallel processing is not negligible and therefore the gains from using it will be more apparent in more formidable tasks like importing a multi-gigabyte data set. But again, one needs the proper setup in order to reap the benefits of this library.</string>
					<key>Title</key>
					<string>v1</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>data = paratext.load_csv_to_dict(“random.csv”)</string>
					<key>Date Created</key>
					<string>2021-01-27 01:18:25 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:19:06 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>As you can see in this reddit post Damian Eads (who apparently is the man behind Paratext) explains that you need a CSV file of at least 100 MBs in order to see the benefits of the library. The overhead or the initial load of setting up parallel processing is not negligible and therefore the gains from using it will be more apparent in more formidable tasks like importing a multi-gigabyte data set. But again, one needs the proper setup in order to reap the benefits of this library.</string>
					<key>Title</key>
					<string>v2</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>paratest</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 23:33:04 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 23:33:15 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>cell = worksheet.find("12-11-2017") #Find a cell with exact string value
print("Text found at R%sC%s" % (cell.row, cell.col))


</string>
					<key>Date Created</key>
					<string>2021-01-27 23:33:04 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 23:34:16 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>PUBLIC Stack Overflow Tags Users FIND A JOB Jobs Companies TEAMS What’s this? Free 30 Day Trial How to get the co-ordinate of a cell in gspread by using cell value in Python 3.6</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-22 12:52:31 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-22 12:53:12 -0400</string>
			<key>Folder</key>
			<string>hotkey-shortcuts</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string># Block Formatting
⌘+0 - Paragraph
⌘+1 - Heading 1
⌘+6 - Heading 6 
⌘+7 -  Preformatted
⌘+8 - Quote
⌘+Shift+B - Bullet list
⌘+Shift+N - Numbered list

# Rich Formatting
⌘+M - Files and images
⌘+K - Link
⌘+Shift+D - Insert markup
⌘+Shift+A - Macro
⌘+Shift+I - Table
⌘+Shift+X - Cut row
⌘+Shift+C - Copy row
⌘+Shift+V - Paste row above

# Editing Actions
⌘+Shift+E - Preview
⌘+S - Save</string>
					<key>Date Created</key>
					<string>2020-10-22 12:52:31 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-22 12:58:44 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Official hotkey shortcuts for Confluence. </string>
					<key>Title</key>
					<string>Editor Hotkeys</string>
				</dict>
				<dict>
					<key>Content</key>
					<string># Font Formatting
*Bold* - Bold text
+Underline+ - Underline text
_Italic_ - Italic text
{{Monospace}} - Monospace text

# Autocomplete
! - Image/Media
[ - Link
Macro - {

# Tables	 	 	 
||||| + enter - first cell
||heading||heading|| - heading	heading

# Styles
h1. Heading - Heading
h3. Heading - Heading
bq. Quote - Quote

# Emoticons
(/)
::)

# Lists
# list - list
* bullets - bullets
task - [] task
</string>
					<key>Date Created</key>
					<string>2020-10-22 12:53:12 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-22 14:02:06 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Autoformat</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Confluence</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 16:06:20 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:06:52 -0400</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=CONCATENATE(D2:E2)</string>
					<key>Date Created</key>
					<string>2020-10-01 16:06:20 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:06:56 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Concat 2 Cells Together</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:06:49 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:06:55 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>if(rng[i]=="赤テキスト"){
sht.getRange(i+4,4).setValue('赤文字').setHorizontalAlignment("center").setFontColor("red");
}else if(rng[i]=="赤テキスト黄色塗り"){
sht.getRange(i+4,4).setValue('赤＆黄色').setHorizontalAlignment("center").setFontColor("red").setBackground(color);
}else{
sht.getRange(i+4,4).setValue('青文字').setHorizontalAlignment("center").setFontColor("blue");
}</string>
					<key>Date Created</key>
					<string>2021-01-28 21:06:49 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:06:57 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>if else text</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 23:38:18 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 23:38:50 -0500</string>
			<key>Folder</key>
			<string>gspread</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>spreadsheetId = "###"  # Please set the Spreadsheet ID.
sourceSheetName = "Sheet1"  # Please set the sheet name of source sheet.
destinationSheetName = "Sheet2"  # Please set the sheet name of destination sheet.

client = gspread.authorize(credentials)
spreadsheet = client.open_by_key(spreadsheetId)
sourceSheetId = spreadsheet.worksheet(sourceSheetName)._properties['sheetId']
destinationSheetId = spreadsheet.worksheet(destinationSheetName)._properties['sheetId']
body = {
    "requests": [
        {
            "copyPaste": {
                "source": {
                    "sheetId": sourceSheetId,
                    "startRowIndex": 0,
                    "endRowIndex": 5,
                    "startColumnIndex": 0,
                    "endColumnIndex": 5
                },
                "destination": {
                    "sheetId": destinationSheetId,
                    "startRowIndex": 0,
                    "endRowIndex": 5,
                    "startColumnIndex": 0,
                    "endColumnIndex": 5
                },
                "pasteType": "PASTE_VALUES"
            }
        }
    ]
}
res = spreadsheet.batch_update(body)
print(res)</string>
					<key>Date Created</key>
					<string>2021-01-27 23:38:18 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 23:38:50 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>1

You want to copy the values from a sheet to other sheet in a Google Spreadsheet.
You want to achieve this using gspread with python.
You have already been able to get and put values for Google Spreadsheet using Google Sheets API.
If my understanding is correct, how about this answer? Please think of this as just one of several possible answers.

In this answer, I would like to propose to use batch_update for copying the values from from a sheet to other sheet in the Spreadsheet. In this case, your goal can be achieved by one API call.

Sample script:
In this sample script, the script of authorization is removed. The sample script for copying values from a sheet to other sheet in the Spreadsheet is shown. So when you use this script, please add the authorization script, and run the script.

</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>How do you copy values from one spreadsheet to another using gspread or some other way?</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 21:09:51 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 21:10:04 -0500</string>
			<key>Folder</key>
			<string>js</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>sendMailGoogleAppsScript
function sendMailAvaliacaoFicha() {
  var sheet = SpreadsheetApp.getActiveSheet();
  var startRow = 2;  // First row of data to process
  var numRows = 9;   // Number of rows to process
  // Fetch the range of cells A2:F10
  var dataRange = sheet.getRange(startRow, 1, numRows, 6)
  // Fetch values for each row in the Range.
  var data = dataRange.getValues();
  for (i in data) {
    var row = data[i];
    var emailAddress = row[1];  // First column
    var message = "Bom dia " + row[5] +",&lt;br/&gt;\n"+
        'Analisamos a sua &lt;strong&gt;avaliação&lt;/strong&gt;:&lt;br/&gt;'+'&lt;pre style="font-family: monospace;font-size: 14px;"&gt;' + row[2]+"&lt;/pre&gt;&lt;br/&gt;\n"+
        "Para atender sua avaliação identificamos as seguintes &lt;strong&gt;ações&lt;/strong&gt; :\n"+'&lt;pre style="font-family: monospace;font-size: 14px;"&gt;' +
        row[3]+"&lt;/pre&gt;&lt;br/&gt;\n"+
        "Estas ações devem atender " + (row[4]*100) + "% de sua avaliação.&lt;br/&gt;" +
        "Caso deseje mais alguma informação entrar em contato com &lt;br/&gt;&lt;br/&gt;"+
        "Fábio Almeida&lt;br/&gt;"   ;       // Second column
    var subject = "::Resultado da Avaliação da Ficha";
    MailApp.sendEmail(emailAddress, subject, "", { htmlBody:message, bcc: "mymail@example.com" });
  }
}</string>
					<key>Date Created</key>
					<string>2021-01-28 21:09:51 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 21:10:06 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>send mail with google apps script</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 03:37:18 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 16:52:06 -0400</string>
			<key>Folder</key>
			<string>vim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>zf#j creates a fold from the cursor down # lines.

zf/string creates a fold from the cursor to string.

zj moves the cursor to the next fold.

zk moves the cursor to the previous fold.

zo opens a fold at the cursor.

zO opens all folds at the cursor.

zm increases the foldlevel by one.

zM closes all open folds.

zr decreases the foldlevel by one.

zR decreases the foldlevel to zero — all folds will be open.

zd deletes the fold at the cursor.

zE deletes all folds.

[z move to start of open fold.

]z move to end of open fold.</string>
					<key>Date Created</key>
					<string>2020-10-01 03:37:18 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 03:38:12 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>folding</string>
				<string>vim</string>
			</array>
			<key>Title</key>
			<string>Folding Commands</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:15:55 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:15:57 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import dask.dataframe
data = dask.dataframe.read_csv(“random.csv”)</string>
					<key>Date Created</key>
					<string>2021-01-27 01:15:55 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:16:54 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>The dask.dataframe is a collection of smaller pandas data frames split by the index (the row labels used for identification of data), which can be processed in parallel on a single machine or on multiple machines on a cluster. I learnt about dask from this useful post by Eric Brown.</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>dask.dataframe</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-01 19:54:49 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-01 19:55:25 -0400</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>git diff --stat </string>
					<key>Date Created</key>
					<string>2019-08-01 19:54:49 -0400</string>
					<key>Date Modified</key>
					<string>2019-08-01 19:55:46 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>http://bit.ly/2GGHmte</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>git diff --stat &lt;hashID&gt; &lt;hashID&gt;</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-30 18:44:42 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-30 18:44:48 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>=query(query(A:A, "SELECT * OFFSET 1",0),"select * skipping 2 ",0)
</string>
					<key>Date Created</key>
					<string>2020-12-30 18:44:42 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 18:44:55 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>https://stackoverflow.com/questions/48265170/query-select-skipping-with-offset-issue</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=query(query(A:A, "SELECT * OFFSET 1",0),"select * skipping 2 ",0)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 02:50:47 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 02:52:05 -0400</string>
			<key>Folder</key>
			<string>macOS</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>⌘ is the Command () key.

⌃ is the Control key.

⌥ is the Option (alt) key.

⇧ is the Shift key.

⇪ is the Caps Lock key.

fn is the Function key. Now you know, but if the symbols confuse you, don't feel too bad about it.</string>
					<key>Date Created</key>
					<string>2020-10-01 02:50:47 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 15:48:29 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Mac Keyboard Icons ⌘ ⌥ ⌃</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-28 23:54:42 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-28 23:54:56 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>/**
 * Copy Formulas Down
 * This script copies functions from a source row (usually the first data row in a spreadsheet) to
 * rows at the end of the sheet, where the colums for these formulas are still empty.
 * It checks row from the bottom upwards, copying formulas into the rows where there are no formulas yet,
 * and stops as soon as it finds a row which has a formula already.
 * When copying formulas, it leaves values in other cells unchanged.
 */

/**
 * Copy formulas from the a source row in a sheet to rows below
 * @param  {Sheet} sheet     	Google Spreadsheet sheet
 * @param  {int} sourceRow 		(optional) 1-based index of source row from which formulas are copied, default: 2
 */
function copyFormulasDown(sheet, sourceRow) {
    if (sourceRow === undefined) {
        sourceRow = 2;
    }
    var formulas = getFormulas_(sheet, sourceRow);
    if (formulas !== {}) {
        var rows = sheet.getDataRange().getFormulas();
        for (var r = rows.length - 1; r &gt;= sourceRow &amp;&amp; rows[r].join('') === ''; r--) {
            copyFormulas_(sheet, r, formulas);
        }
    }
}
/**
 * Copy formulas into row r in sheet
 * @param  {Sheet} sheet     	Google Spreadsheet sheet
 * @param  {int} r 				1-based index of row where formulas will be copied
 * @param  {array} formulas 	array of objects with column index and formula string
 */
function copyFormulas_(sheet, r, formulas) {
    for (var i = 0; i &lt; formulas.length; i++) {
        sheet.getRange(r + 1, formulas[i].c + 1).setFormulaR1C1(formulas[i].formula);
    }
}
/**
 * Read formulas from the source row, creating an array of objects
 * Each objects contains the column index and formula string
 * @param  {Sheet} sheet     	Google Spreadsheet sheet
 * @param  {int} r				1-based index of source row
 * @return {array}				array of objects
 */
function getFormulas_(sheet, r) {
    var row = sheet.getRange(r, 1, 1, sheet.getLastColumn()).getFormulasR1C1()[0];
    var formulas = [];
    for (var c = 0; c &lt; row.length; c++) {
        if (row[c] !== '') {
            formulas.push({
                c: c,
                formula: row[c]
            });
        }
    }
    return formulas;
}</string>
					<key>Date Created</key>
					<string>2021-01-28 23:54:42 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-28 23:54:58 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Copy Formulas Down</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-12-30 21:27:45 -0500</string>
			<key>Date Modified</key>
			<string>2020-12-30 21:27:54 -0500</string>
			<key>Folder</key>
			<string>g-sheets</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2020-12-30 21:27:45 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-30 21:27:45 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>=IFERROR(function)</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 15:59:23 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 15:59:35 -0400</string>
			<key>Folder</key>
			<string>bash</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>#!/usr/bin/env bash

#!/bin/bash
for domain in `cat domains.txt`
do
   echo $domain
   `whois $domain &gt;&gt; whois-results.txt`
done</string>
					<key>Date Created</key>
					<string>2020-10-01 15:59:23 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 16:01:37 -0400</string>
					<key>Language</key>
					<string>Bash</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>Batch Whois Domain Lookup</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-27 01:13:33 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-27 01:15:05 -0500</string>
			<key>Folder</key>
			<string>data-analysis-python</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>import pandas
data = pd.read_csv(“random.csv”)</string>
					<key>Date Created</key>
					<string>2021-01-27 01:13:33 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:14:51 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string> Pandas are data structures tailored for data analysis and data science work. They are suited for tabular data with heterogeneously-typed columns (integers, floats, strings like the random data we already created), as well as time series. 

An importnat point here is that pandas.read_csv() can be run with the chunksize option. This will break the input file into chunks instead of loading the whole file into memory. This will reduce the pressure on memory for large input files and given an optimal chunksize found through trial and error, there can be significant increase in efficiency. The code below will split the input file into chunks of 100 000 lines</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>chunks = pd.read_csv(input_file, chunksize=100000)
data = pd.concat(chunks)</string>
					<key>Date Created</key>
					<string>2021-01-27 01:15:05 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-27 01:15:49 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>An importnat point here is that pandas.read_csv() can be run with the chunksize option. This will break the input file into chunks instead of loading the whole file into memory. This will reduce the pressure on memory for large input files and given an optimal chunksize found through trial and error, there can be significant increase in efficiency. 

The code below will split the input file into chunks of 100 000 lines
</string>
					<key>Title</key>
					<string>100,000 lines</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>pandas.read_csv()</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-18 17:47:05 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-23 12:13:46 -0500</string>
			<key>Folder</key>
			<string>python3</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string> python3 -m venv venv
 source venv/bin/activate</string>
					<key>Date Created</key>
					<string>2020-11-18 17:47:05 -0500</string>
					<key>Date Modified</key>
					<string>2020-12-16 20:52:41 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Create ENV</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>source venv/bin/activate</string>
					<key>Date Created</key>
					<string>2020-11-18 17:47:39 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-18 17:48:03 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Activate ENV</string>
				</dict>
				<dict>
					<key>Content</key>
					<string>deactivate</string>
					<key>Date Created</key>
					<string>2020-11-18 17:48:12 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-18 17:48:25 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Deactive ENV</string>
				</dict>
				<dict>
					<key>Content</key>
					<string> python3 -m venv venv
 source venv/bin/activate</string>
					<key>Date Created</key>
					<string>2020-11-23 12:13:46 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-23 12:14:04 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Combo</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>vevnv</string>
			</array>
			<key>Title</key>
			<string>Python ENV Start / Stop</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2021-01-29 24:42:08 -0500</string>
			<key>Date Modified</key>
			<string>2021-01-29 24:42:17 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>// Google Apps Script to take a value in column A and fill it down until a new value shows up in a cell for Google Sheets
// Author: Al Chen (al@coda.io)
// Last Updated: September 6th, 2020
// Video tutorial: https://youtu.be/t-32QkyjKVE?t=106

function fillValuesDown() {
  var spreadsheet = SpreadsheetApp.getActive()
  var currentRange = spreadsheet.getRange("A2:A" + spreadsheet.getLastRow())
  var newRange = []
  var newFillValue
  currentRange.getValues().map(function(value) {
    if (value[0] !== '') {
      newFillValue = value[0]
      newRange.push([newFillValue])
    } else {
      newRange.push([newFillValue])
    }
  })
  currentRange.setValues(newRange)
}</string>
					<key>Date Created</key>
					<string>2021-01-29 24:42:08 -0500</string>
					<key>Date Modified</key>
					<string>2021-01-29 24:42:23 -0500</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>copy formula down</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-10-01 17:27:09 -0400</string>
			<key>Date Modified</key>
			<string>2020-10-01 17:27:19 -0400</string>
			<key>Folder</key>
			<string>SpaceVim</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>
Keybindings	Descriptions

h	toggle view home (buffers) list

H	enter home (buffers) list in search

o	toggle view project files list

O	enter project files in search

l	toggle view tabs list

L	enter tabs search in search

w	toggle view workspaces list

W	enter workspaces list in search

b	toggle view bookmarks list

B	enter bookmarks list in search

/	toggle search mode for current list

?	display help for current list and mode</string>
					<key>Date Created</key>
					<string>2020-10-01 17:27:09 -0400</string>
					<key>Date Modified</key>
					<string>2020-10-01 17:27:36 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string></string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array/>
			<key>Title</key>
			<string>CntrlSpace Keybindings</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2020-11-04 19:46:05 -0500</string>
			<key>Date Modified</key>
			<string>2020-11-04 19:47:42 -0500</string>
			<key>Folder</key>
			<string>gas</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string>// Credit: github.com/danthareja

function doGet(request) {

  // ID of Google Spreadsheet
  var json = getNotesAndFormulas(request.parameter.id);

  return ContentService.createTextOutput(JSON.stringify(cache))
  .setMimeType(ContentService.MimeType.JSON);
}

function getNotesAndFormulas(spreadsheetId) {
  return SpreadsheetApp
  .openById(spreadsheetId)
  .getSheets()
  .reduce(function(cache, sheet) {

    var sheetData = cache[sheet.getName()] = {};
    var range = sheet.getDataRange();

    sheetData.range = range.getA1Notation();
    sheetData.notes = range.getNotes();
    sheetData.formulas = range.getFormulas();

    return cache;
  }, { spreadsheetId: spreadsheetId });
}</string>
					<key>Date Created</key>
					<string>2020-11-04 19:46:05 -0500</string>
					<key>Date Modified</key>
					<string>2020-11-04 19:46:35 -0500</string>
					<key>Language</key>
					<string>JavaScript</string>
					<key>Note</key>
					<string>Dan Thareja has written a Google Script that will let you export all the formulas, cell values and notes from a Google Spreadsheet as a JSON file. You can also pull the Google formulas in another web app or Google Apps script using a GET Request. It should come handy when you are reviewing the formulas of a large sheet.

https://www.labnol.org/code/20057-export-google-sheet-formulas</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>apps scipt</string>
				<string>google apps script</string>
				<string>gas</string>
				<string>clasp</string>
				<string>g-suite</string>
				<string>g-sheets</string>
			</array>
			<key>Title</key>
			<string>Export Formulas and Notes from a Google Spreadsheet</string>
		</dict>
		<dict>
			<key>Date Created</key>
			<string>2019-08-01 17:03:29 -0400</string>
			<key>Date Modified</key>
			<string>2019-08-01 17:04:15 -0400</string>
			<key>Folder</key>
			<string>git</string>
			<key>Fragments</key>
			<array>
				<dict>
					<key>Content</key>
					<string></string>
					<key>Date Created</key>
					<string>2019-08-01 17:03:29 -0400</string>
					<key>Date Modified</key>
					<string>2019-08-01 17:04:10 -0400</string>
					<key>Language</key>
					<string>Plain Text</string>
					<key>Note</key>
					<string>Recently I wanted to pull a list of changed files from an older commit from the command line.

Turns out (like most things in Git) this is very easy to do. git show –name-only {commit}

You can replace {commit} with the SHA1 you want to retrieve, or things like HEAD or HEAD^^

I made this post into a YouTube video</string>
					<key>Title</key>
					<string>Fragment</string>
				</dict>
			</array>
			<key>Tags</key>
			<array>
				<string>git log</string>
				<string>git</string>
			</array>
			<key>Title</key>
			<string>git show &lt;hash&gt; --name-only</string>
		</dict>
	</array>
	<key>Snippets Count</key>
	<string>97</string>
</dict>
</plist>
